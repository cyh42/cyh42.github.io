<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记录我去过的和想去的地方</title>
    <url>/article/footprint/</url>
    <content><![CDATA[<p>旅行列表&amp;心愿名单</p>
<a id="more"></a>

<h2 id="旅行列表"><a href="#旅行列表" class="headerlink" title="旅行列表"></a>旅行列表</h2><table>
<thead>
<tr>
<th>日期</th>
<th>省份</th>
<th>城市\地区（景点）</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>2010/8/8-10</td>
<td>上海市</td>
<td>世博会</td>
<td></td>
</tr>
<tr>
<td>2010年8月中旬</td>
<td>浙江省</td>
<td>杭州（西湖）、绍兴（鲁迅故里）</td>
<td></td>
</tr>
<tr>
<td>2015/7/21-24</td>
<td>福建省</td>
<td>厦门（厦门大学、嘉庚公园、鼓浪屿、曾厝垵）</td>
<td></td>
</tr>
<tr>
<td>2016/7/5-6</td>
<td>浙江省</td>
<td>西塘</td>
<td></td>
</tr>
<tr>
<td>2016/7/7</td>
<td>浙江省</td>
<td>乌镇</td>
<td></td>
</tr>
<tr>
<td>2016/7/8-9</td>
<td>上海市</td>
<td>城隍庙、东方明珠、外滩、同济、复旦、上交</td>
<td></td>
</tr>
<tr>
<td>2016/9/2<br>2017/7/6</td>
<td>江苏省</td>
<td>南京（鼓楼、中山陵、夫子庙、南大、东南）</td>
<td></td>
</tr>
<tr>
<td>2018/7/10-18</td>
<td>山东省</td>
<td>东营（石油大学）</td>
<td>实习</td>
</tr>
<tr>
<td>2018/7/23-28</td>
<td>河南省</td>
<td>洛阳（一拖、丽景门、龙门石窟）、巩义市</td>
<td>实习</td>
</tr>
<tr>
<td>2019/6/30-7/4</td>
<td>湖北省</td>
<td>武汉（华科、黄鹤楼、长江大桥、龟山）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/5-7</td>
<td>陕西省</td>
<td>西安（西交、钟楼、鼓楼、大明宫）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/8-10</td>
<td>天津市</td>
<td>天津大学、天津之眼、天塔</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/10-14<br>2019/7/20-31</td>
<td>河北省</td>
<td>唐山市曹妃甸区</td>
<td>实习</td>
</tr>
<tr>
<td>2019/7/15-19</td>
<td>安徽省</td>
<td>合肥（中科大）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/8/1</td>
<td>山东省</td>
<td>济南（芙蓉街、大明湖）</td>
<td>换乘</td>
</tr>
<tr>
<td>2019/9/15</td>
<td>北京市</td>
<td>清华、北大、南锣鼓巷、天坛、永定门</td>
<td>预推免</td>
</tr>
<tr>
<td>2019/9/26-28</td>
<td>浙江省</td>
<td>杭州（浙大玉泉校区、西湖、城市阳台）</td>
<td>预推免</td>
</tr>
<tr>
<td>2019/9/28</td>
<td>浙江省</td>
<td>宁波（老外滩、江北天主教堂、解放桥）</td>
<td>转飞机</td>
</tr>
</tbody></table>
<h2 id="心愿名单"><a href="#心愿名单" class="headerlink" title="心愿名单"></a>心愿名单</h2><table>
<thead>
<tr>
<th>目的地</th>
<th>内容</th>
<th>计划时间</th>
</tr>
</thead>
<tbody><tr>
<td>山东泰安</td>
<td>泰山</td>
<td>2020年上半年</td>
</tr>
<tr>
<td>湖南长沙</td>
<td>岳麓山、湖南大学、橘子洲头、茶颜悦色</td>
<td></td>
</tr>
<tr>
<td>成都、重庆</td>
<td>大熊猫基地、火锅、串串</td>
<td></td>
</tr>
<tr>
<td>香港</td>
<td></td>
<td>2021-2023</td>
</tr>
<tr>
<td>澳门</td>
<td>威尼斯人、官也街、大三巴牌坊</td>
<td>2021-2023</td>
</tr>
<tr>
<td>日本</td>
<td>东京、北海道、富士山</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 和高德 API 绘制跑步轨迹</title>
    <url>/article/run-track/</url>
    <content><![CDATA[<p>把2019年在不同地方跑步的轨迹都画在一张地图上，看看过去一年都跑过哪些地方。</p>
<a id="more"></a>

<h2 id="导出-GPX-文件"><a href="#导出-GPX-文件" class="headerlink" title="导出 GPX 文件"></a>导出 GPX 文件</h2><p>第一步，先把各个地方能导出轨迹的都导出来。看了一下 .FIT 、 .TPX 和 .GPX 中，以 GPX 文件结构最简单，于是把轨迹都导成 .gpx 格式文件。</p>
<h2 id="读取-GPX-文件数据"><a href="#读取-GPX-文件数据" class="headerlink" title="读取 GPX 文件数据"></a>读取 GPX 文件数据</h2><p>第二步，用 Python 读入这些 GPX 轨迹信息，处理后再画在地图上，直接使用 Python 自带的 xml 库完成读取，注意要剔除 lat 和 lon 为0的数据点，因为 GPX 是用这种方法来标记暂停的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdom</span><br><span class="line"></span><br><span class="line">dom_tree = xdom.parse(os.path.join(filePath, gpxPath))</span><br><span class="line">collection = dom_tree.documentElement</span><br><span class="line">trkpts = collection.getElementsByTagName(<span class="string">"trkpt"</span>)</span><br><span class="line">data = <span class="string">'&#123;"line_id":"'</span> + gpxPath[:<span class="number">8</span>] + <span class="string">'","lnglat":['</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> trkpt <span class="keyword">in</span> trkpts:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    lat = trkpt.getAttribute(<span class="string">"lat"</span>)</span><br><span class="line">    lon = trkpt.getAttribute(<span class="string">"lon"</span>)</span><br><span class="line">    <span class="keyword">if</span> lat == <span class="string">'0'</span> <span class="keyword">or</span> lon == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    ret = wgs84_to_gcj02(float(lon), float(lat))</span><br><span class="line">    data = data + <span class="string">'['</span> + str(ret[<span class="number">0</span>]) + <span class="string">','</span> + str(ret[<span class="number">1</span>]) + <span class="string">']'</span></span><br><span class="line">    <span class="keyword">if</span>(i &lt; len(trkpts)):</span><br><span class="line">        data = data + <span class="string">','</span></span><br><span class="line">data = data + <span class="string">']&#125;,'</span></span><br></pre></td></tr></table></figure>

<h2 id="WGS84-转-GCJ02，解决高德坐标偏移"><a href="#WGS84-转-GCJ02，解决高德坐标偏移" class="headerlink" title="WGS84 转 GCJ02，解决高德坐标偏移"></a>WGS84 转 GCJ02，解决高德坐标偏移</h2><p>用 Python 实现 GPS 偏移校正，WGS84 转 GCJ02（火星坐标系）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br></pre></td></tr></table></figure>

<h2 id="输出-JSON-文件"><a href="#输出-JSON-文件" class="headerlink" title="输出 JSON 文件"></a>输出 JSON 文件</h2><p>输出 JS 可以方便读取的 JSON 文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">jsonDir = os.path.abspath(<span class="string">'./jsons'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(jsonDir):</span><br><span class="line">    os.mkdir(jsonDir)</span><br><span class="line">jsonPath = os.path.join(jsonDir, gpxPath[:<span class="number">8</span>]) + <span class="string">'.json'</span></span><br><span class="line"><span class="keyword">with</span> open(jsonPath, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<p>为了方便的处理多条数据，把上面 Python 的部分写成一个 procXml 函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    filePath = os.path.abspath(<span class="string">'./gpxs'</span>)</span><br><span class="line">    fileList = os.listdir(filePath)</span><br><span class="line">    <span class="keyword">for</span> gpxPath <span class="keyword">in</span> fileList:</span><br><span class="line">        print(<span class="string">'Processing '</span> + str(gpxPath))</span><br><span class="line">        procXml(filePath, gpxPath)</span><br><span class="line">        print(<span class="string">'Coresponding JSON file was generated.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="对位置数据进行可视化展示"><a href="#对位置数据进行可视化展示" class="headerlink" title="对位置数据进行可视化展示"></a>对位置数据进行可视化展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1.0, user-scalable=no, width=device-width"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>跑步轨迹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cache.amap.com/lbs/static/main1119.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myPageTop"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入关键字：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"tipinput"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=您申请的key值"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/loca?v=1.3.2&amp;key=您申请的key值"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./line.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cache.amap.com/lbs/static/addToolbar.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span>		</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'amap://styles/1de318cbb8d12c02303a22c550b9ccc9'</span>,</span></span><br><span class="line">            zoom: 11,</span><br><span class="line"><span class="actionscript">            center: [<span class="number">120.168109</span>,<span class="number">35.943654</span>], <span class="comment">// 青岛</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// zoom: 15,</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// center: [121.37553692,28.3687836300], // 温岭</span></span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'dark'</span>,</span></span><br><span class="line"><span class="actionscript">			features: [<span class="string">'bg'</span>,<span class="string">'point'</span>],</span></span><br><span class="line"><span class="actionscript">            resizeEnable: <span class="literal">true</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//输入提示</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> autoOptions = &#123;</span></span><br><span class="line"><span class="actionscript">            input: <span class="string">"tipinput"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        AMap.plugin([<span class="string">'AMap.Autocomplete'</span>,<span class="string">'AMap.PlaceSearch'</span>,<span class="string">'AMap.MapType'</span>],<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> auto = <span class="keyword">new</span> AMap.Autocomplete(autoOptions);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> placeSearch = <span class="keyword">new</span> AMap.PlaceSearch(&#123;</span></span><br><span class="line">                map: map</span><br><span class="line"><span class="actionscript">            &#125;);  <span class="comment">//构造地点查询类</span></span></span><br><span class="line"><span class="actionscript">            AMap.event.addListener(auto, <span class="string">"select"</span>, select);<span class="comment">//注册监听，当选中某条记录时会触发</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">                placeSearch.setCity(e.poi.adcode);</span><br><span class="line"><span class="actionscript">                placeSearch.search(e.poi.name);  <span class="comment">//关键字查询查询</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            map.addControl(<span class="keyword">new</span> AMap.MapType());</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> Loca.LineLayer(&#123;</span></span><br><span class="line">            map: map</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">		<span class="keyword">var</span> colors = [<span class="string">'#07E8E4'</span>,<span class="string">'#1f78b4'</span>,<span class="string">'#b2df8a'</span>,<span class="string">'#33a02c'</span>,<span class="string">'#fb9a99'</span>,<span class="string">'#e31a1c'</span>,<span class="string">'#fdbf6f'</span>,<span class="string">'#ff7f00'</span>,<span class="string">'#D1E87D'</span>,<span class="string">'#AD92D1'</span>,<span class="string">'#3346BD'</span>,<span class="string">'#EBEB8D'</span>,<span class="string">'#7FC97F'</span>];</span></span><br><span class="line"></span><br><span class="line">        layer.setData(lines, &#123;</span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'lnglat'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setOptions(&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line">                borderWidth: 3,</span><br><span class="line">                opacity: 1,</span><br><span class="line"><span class="actionscript">                color: <span class="function"><span class="keyword">function</span><span class="params">(v)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> id = v.value.line_id;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> len = colors.length;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> colors[id % len];</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">		<span class="comment">// 渲染</span></span></span><br><span class="line">		layer.render();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考: <a href="https://lbs.amap.com/api/loca-api/demos/line/bj_busline_colors" target="_blank" rel="noopener">高德地图 API 分类路径示例</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://cyh42.github.io/Blog-Back-Up/map/run">跑步轨迹</a></p>
<p><img src="/article/run-track/Qingdao.jpg" alt></p>
<p><img src="/article/run-track/Wenling.jpg" alt></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 和高德地图 API 绘制我的足迹</title>
    <url>/article/track/</url>
    <content><![CDATA[<p>最近3年多去了不少城市，拍了不少照片，因此萌生了写个程序提取照片位置信息，转换为轨迹点画在一张地图上的想法。</p>
<a id="more"></a>

<h2 id="导出-GPX-文件"><a href="#导出-GPX-文件" class="headerlink" title="导出 GPX 文件"></a>导出 GPX 文件</h2><p>使用 GeoSetter 软件批量提取并导出图像 GPS 信息，保存为 GPX 文件，下面是一段 .gpx 文件的记录点格式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trkpt</span> <span class="attr">lat</span>=<span class="string">"35.94073611"</span> <span class="attr">lon</span>=<span class="string">"120.17107500"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span>2017-10-19T20:40:31Z<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ele</span>&gt;</span>11.170000<span class="tag">&lt;/<span class="name">ele</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">speed</span>&gt;</span>0.000000<span class="tag">&lt;/<span class="name">speed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span>293.078156<span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trkpt</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="读取-GPX-文件数据"><a href="#读取-GPX-文件数据" class="headerlink" title="读取 GPX 文件数据"></a>读取 GPX 文件数据</h2><p>直接使用 Python 自带的 xml 库完成读取 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdom</span><br><span class="line"></span><br><span class="line">dom_tree = xdom.parse(os.path.join(filePath, gpxPath))</span><br><span class="line">collection = dom_tree.documentElement</span><br><span class="line">trkpts = collection.getElementsByTagName(<span class="string">"trkpt"</span>)</span><br><span class="line">data = <span class="string">""</span></span><br><span class="line">rets = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> trkpt <span class="keyword">in</span> trkpts:</span><br><span class="line">    lat = trkpt.getAttribute(<span class="string">"lat"</span>)</span><br><span class="line">    lon = trkpt.getAttribute(<span class="string">"lon"</span>)</span><br><span class="line">    <span class="keyword">if</span> lat == <span class="string">'0'</span> <span class="keyword">or</span> lon == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    ret = wgs84_to_gcj02(float(lon), float(lat))</span><br><span class="line">    rets.append(ret)</span><br><span class="line">    data = data + <span class="string">"&#123; 'center': '"</span> + str(ret[<span class="number">0</span>]) + <span class="string">","</span> + str(ret[<span class="number">1</span>]) + <span class="string">"' &#125;,\n"</span></span><br></pre></td></tr></table></figure>

<h2 id="WGS84-转-GCJ02，解决高德坐标偏移"><a href="#WGS84-转-GCJ02，解决高德坐标偏移" class="headerlink" title="WGS84 转 GCJ02，解决高德坐标偏移"></a>WGS84 转 GCJ02，解决高德坐标偏移</h2><p>做过地图相关开发的同学肯定会遇到这样一个问题：同样的经纬度坐标，在谷歌地图和高德地图上的位置是不一样的。</p>
<h3 id="常用地图坐标系介绍"><a href="#常用地图坐标系介绍" class="headerlink" title="常用地图坐标系介绍"></a>常用地图坐标系介绍</h3><ul>
<li>WGS-84：是使用最广泛的坐标系，也是世界通用的坐标系，GPS 设备得到的经纬度就是在 WGS84 坐标系下的经纬度。通常底层接口（ HTML5 Geolocation 或 iOS、安卓 API ）得到的定位信息都是 WGS84 坐标系。</li>
<li>GCJ-02：又被称为火星坐标系，中国坐标偏移标准，高德地图、腾讯地图以及 Google 中国区地图使用。</li>
<li>BD-09 ：百度坐标偏移标准，百度地图使用。</li>
</ul>
<h3 id="Python-实现-GPS-偏移校正-WGS-84-到-GCJ-02"><a href="#Python-实现-GPS-偏移校正-WGS-84-到-GCJ-02" class="headerlink" title="Python 实现 GPS 偏移校正 ( WGS-84 ) 到 ( GCJ-02 )"></a>Python 实现 GPS 偏移校正 ( WGS-84 ) 到 ( GCJ-02 )</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br></pre></td></tr></table></figure>

<h2 id="输出-JS-文件"><a href="#输出-JS-文件" class="headerlink" title="输出 JS 文件"></a>输出 JS 文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">jsDir = os.path.abspath(<span class="string">'./js'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(jsDir):</span><br><span class="line">    os.mkdir(jsDir)</span><br><span class="line">jsonPath = os.path.join(jsDir, gpxPath) + <span class="string">'.js'</span></span><br><span class="line"><span class="keyword">with</span> open(jsonPath, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<p>为了方便的处理多条数据，把上面 Python 的部分写成一个 procXml 函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    filePath = os.path.abspath(<span class="string">'./gpxs'</span>)</span><br><span class="line">    fileList = os.listdir(filePath)</span><br><span class="line">    <span class="keyword">for</span> gpxPath <span class="keyword">in</span> fileList:</span><br><span class="line">        print(<span class="string">'Processing '</span> + str(gpxPath))</span><br><span class="line">        procXml(filePath, gpxPath)</span><br><span class="line">        print(<span class="string">'Coresponding JS file was generated.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="对位置数据进行可视化展示"><a href="#对位置数据进行可视化展示" class="headerlink" title="对位置数据进行可视化展示"></a>对位置数据进行可视化展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的足迹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cache.amap.com/lbs/static/main1119.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myPageTop"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入关键字：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"tipinput"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/loca?v=1.3.2&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./data.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cache.amap.com/lbs/static/addToolbar.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'amap://styles/1de318cbb8d12c02303a22c550b9ccc9'</span>,</span></span><br><span class="line">            zoom: 5,</span><br><span class="line">            center: [112.12255, 35.2044],</span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'dark'</span>,</span></span><br><span class="line"><span class="actionscript">            features: [<span class="string">'bg'</span>, <span class="string">'road'</span>, <span class="string">'point'</span>],</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> Loca.PointLayer(&#123;</span></span><br><span class="line">            map: map</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setData(districts, &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 指定经纬度所在字段</span></span></span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'center'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setOptions(&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 圆形半径，单位像素</span></span></span><br><span class="line">                radius: 2.5,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 填充颜色</span></span></span><br><span class="line"><span class="actionscript">                color: <span class="string">'#14B4C9'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 描边颜色</span></span></span><br><span class="line"><span class="actionscript">                borderColor: <span class="string">'#14B4C9'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 描边宽度，单位像素</span></span></span><br><span class="line">                borderWidth: 1,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 透明度 [0-1]</span></span></span><br><span class="line">                opacity: 0.9,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.render();</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//输入提示</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> autoOptions = &#123;</span></span><br><span class="line"><span class="actionscript">            input: <span class="string">"tipinput"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        AMap.plugin([<span class="string">'AMap.Autocomplete'</span>,<span class="string">'AMap.PlaceSearch'</span>,<span class="string">'AMap.MapType'</span>],<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> auto = <span class="keyword">new</span> AMap.Autocomplete(autoOptions);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> placeSearch = <span class="keyword">new</span> AMap.PlaceSearch(&#123;</span></span><br><span class="line">                map: map</span><br><span class="line"><span class="actionscript">            &#125;);  <span class="comment">//构造地点查询类</span></span></span><br><span class="line"><span class="actionscript">            AMap.event.addListener(auto, <span class="string">"select"</span>, select);<span class="comment">//注册监听，当选中某条记录时会触发</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">                placeSearch.setCity(e.poi.adcode);</span><br><span class="line"><span class="actionscript">                placeSearch.search(e.poi.name);  <span class="comment">//关键字查询查询</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            map.addControl(<span class="keyword">new</span> AMap.MapType());</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考: <a href="https://lbs.amap.com/api/loca-api/demos/scatter/scatter_citys" target="_blank" rel="noopener">高德地图 API 散点示例</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://cyh42.github.io/Blog-Back-Up/map/track">我的足迹</a></p>
<p><img src="/article/track/CHN.jpg" alt></p>
<p><img src="/article/track/TAO.jpg" alt></p>
<p><img src="/article/track/UPC.jpg" alt></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>保研经验分享：如果当时选择了放弃，我可能会后悔一辈子</title>
    <url>/article/tm/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码" />
    <label for="pass">请输入密码</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>保研</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/article/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
