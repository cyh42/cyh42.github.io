<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记录我去过的和想去的地方</title>
    <url>/article/travel/</url>
    <content><![CDATA[<p>旅行列表&amp;心愿名单</p>
<a id="more"></a>

<h2 id="旅行列表"><a href="#旅行列表" class="headerlink" title="旅行列表"></a>旅行列表</h2><table>
<thead>
<tr>
<th>日期</th>
<th>省份</th>
<th>城市\地区（景点）</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>2010/8/8-10</td>
<td>上海市</td>
<td>世博会</td>
<td></td>
</tr>
<tr>
<td>2010年8月中旬</td>
<td>浙江省</td>
<td>杭州（西湖）、绍兴（鲁迅故里）</td>
<td></td>
</tr>
<tr>
<td>2013年6月下旬</td>
<td>湖北省</td>
<td>武汉（黄鹤楼、长江大桥）</td>
<td>中考后</td>
</tr>
<tr>
<td>2015/7/21-24</td>
<td>福建省</td>
<td>厦门（厦门大学、嘉庚公园、鼓浪屿、曾厝垵）</td>
<td></td>
</tr>
<tr>
<td>2016/7/5-6</td>
<td>浙江省</td>
<td>西塘</td>
<td></td>
</tr>
<tr>
<td>2016/7/7</td>
<td>浙江省</td>
<td>乌镇</td>
<td></td>
</tr>
<tr>
<td>2016/7/8-9</td>
<td>上海市</td>
<td>城隍庙、东方明珠、外滩、同济、复旦、上交</td>
<td></td>
</tr>
<tr>
<td>2016/9/2<br>2017/7/6</td>
<td>江苏省</td>
<td>南京（鼓楼、中山陵、夫子庙、南大、东南）</td>
<td></td>
</tr>
<tr>
<td>2018/7/10-18</td>
<td>山东省</td>
<td>东营（石油大学）</td>
<td>实习</td>
</tr>
<tr>
<td>2018/7/23-28</td>
<td>河南省</td>
<td>洛阳（一拖、丽景门、龙门石窟）、巩义市</td>
<td>实习</td>
</tr>
<tr>
<td>2019/6/30-7/4</td>
<td>湖北省</td>
<td>武汉（华科、黄鹤楼、长江大桥、龟山）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/5-7</td>
<td>陕西省</td>
<td>西安（西交、钟楼、鼓楼、大明宫）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/8-10</td>
<td>天津市</td>
<td>天津大学、天津之眼、天塔</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/10-14<br>2019/7/20-31</td>
<td>河北省</td>
<td>唐山市曹妃甸区</td>
<td>实习</td>
</tr>
<tr>
<td>2019/7/15-19</td>
<td>安徽省</td>
<td>合肥（中科大）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/8/1</td>
<td>山东省</td>
<td>济南（芙蓉街、大明湖）</td>
<td>换乘</td>
</tr>
<tr>
<td>2019/9/15</td>
<td>北京市</td>
<td>清华、北大、南锣鼓巷、天坛、永定门</td>
<td>预推免</td>
</tr>
<tr>
<td>2019/9/26-28</td>
<td>浙江省</td>
<td>杭州（浙大玉泉校区、西湖、城市阳台）</td>
<td>预推免</td>
</tr>
<tr>
<td>2019/9/28</td>
<td>浙江省</td>
<td>宁波（老外滩、江北天主教堂、解放桥）</td>
<td>转飞机</td>
</tr>
</tbody></table>
<h2 id="心愿名单"><a href="#心愿名单" class="headerlink" title="心愿名单"></a>心愿名单</h2><table>
<thead>
<tr>
<th>目的地</th>
<th>内容</th>
<th>计划时间</th>
</tr>
</thead>
<tbody><tr>
<td>山东泰安</td>
<td>泰山</td>
<td>2020年上半年</td>
</tr>
<tr>
<td>湖南长沙</td>
<td>岳麓山、湖南大学、橘子洲头、茶颜悦色</td>
<td></td>
</tr>
<tr>
<td>成都、重庆</td>
<td>大熊猫基地、火锅、串串</td>
<td></td>
</tr>
<tr>
<td>香港</td>
<td></td>
<td>2021-2023</td>
</tr>
<tr>
<td>澳门</td>
<td>威尼斯人、官也街、大三巴牌坊</td>
<td>2021-2023</td>
</tr>
<tr>
<td>日本</td>
<td>东京、北海道、富士山</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 和高德 API 绘制跑步轨迹</title>
    <url>/article/run-track/</url>
    <content><![CDATA[<p>把2019年在不同地方跑步的轨迹都画在一张地图上，看看过去一年都跑过哪些地方。</p>
<a id="more"></a>

<h2 id="导出-GPX-文件"><a href="#导出-GPX-文件" class="headerlink" title="导出 GPX 文件"></a>导出 GPX 文件</h2><p>第一步，先把各个地方能导出轨迹的都导出来。看了一下 .FIT 、 .TPX 和 .GPX 中，以 GPX 文件结构最简单，于是把轨迹都导成 .gpx 格式文件。</p>
<h2 id="读取-GPX-文件数据"><a href="#读取-GPX-文件数据" class="headerlink" title="读取 GPX 文件数据"></a>读取 GPX 文件数据</h2><p>第二步，用 Python 读入这些 GPX 轨迹信息，处理后再画在地图上，直接使用 Python 自带的 xml 库完成读取，注意要剔除 lat 和 lon 为0的数据点，因为 GPX 是用这种方法来标记暂停的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdom</span><br><span class="line"></span><br><span class="line">dom_tree = xdom.parse(os.path.join(filePath, gpxPath))</span><br><span class="line">collection = dom_tree.documentElement</span><br><span class="line">trkpts = collection.getElementsByTagName(<span class="string">"trkpt"</span>)</span><br><span class="line">data = <span class="string">'&#123;"line_id":"'</span> + gpxPath[:<span class="number">8</span>] + <span class="string">'","lnglat":['</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> trkpt <span class="keyword">in</span> trkpts:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    lat = trkpt.getAttribute(<span class="string">"lat"</span>)</span><br><span class="line">    lon = trkpt.getAttribute(<span class="string">"lon"</span>)</span><br><span class="line">    <span class="keyword">if</span> lat == <span class="string">'0'</span> <span class="keyword">or</span> lon == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    ret = wgs84_to_gcj02(float(lon), float(lat))</span><br><span class="line">    data = data + <span class="string">'['</span> + str(ret[<span class="number">0</span>]) + <span class="string">','</span> + str(ret[<span class="number">1</span>]) + <span class="string">']'</span></span><br><span class="line">    <span class="keyword">if</span>(i &lt; len(trkpts)):</span><br><span class="line">        data = data + <span class="string">','</span></span><br><span class="line">data = data + <span class="string">']&#125;,'</span></span><br></pre></td></tr></table></figure>

<h2 id="WGS84-转-GCJ02，解决高德坐标偏移"><a href="#WGS84-转-GCJ02，解决高德坐标偏移" class="headerlink" title="WGS84 转 GCJ02，解决高德坐标偏移"></a>WGS84 转 GCJ02，解决高德坐标偏移</h2><p>用 Python 实现 GPS 偏移校正，WGS84 转 GCJ02（火星坐标系）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br></pre></td></tr></table></figure>

<h2 id="输出-JSON-文件"><a href="#输出-JSON-文件" class="headerlink" title="输出 JSON 文件"></a>输出 JSON 文件</h2><p>输出 JS 可以方便读取的 JSON 文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">jsonDir = os.path.abspath(<span class="string">'./jsons'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(jsonDir):</span><br><span class="line">    os.mkdir(jsonDir)</span><br><span class="line">jsonPath = os.path.join(jsonDir, gpxPath[:<span class="number">8</span>]) + <span class="string">'.json'</span></span><br><span class="line"><span class="keyword">with</span> open(jsonPath, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<p>为了方便的处理多条数据，把上面 Python 的部分写成一个 procXml 函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    filePath = os.path.abspath(<span class="string">'./gpxs'</span>)</span><br><span class="line">    fileList = os.listdir(filePath)</span><br><span class="line">    <span class="keyword">for</span> gpxPath <span class="keyword">in</span> fileList:</span><br><span class="line">        print(<span class="string">'Processing '</span> + str(gpxPath))</span><br><span class="line">        procXml(filePath, gpxPath)</span><br><span class="line">        print(<span class="string">'Coresponding JSON file was generated.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="对位置数据进行可视化展示"><a href="#对位置数据进行可视化展示" class="headerlink" title="对位置数据进行可视化展示"></a>对位置数据进行可视化展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1.0, user-scalable=no, width=device-width"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>跑步轨迹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cache.amap.com/lbs/static/main1119.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myPageTop"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入关键字：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"tipinput"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=您申请的key值"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/loca?v=1.3.2&amp;key=您申请的key值"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./line.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cache.amap.com/lbs/static/addToolbar.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span>		</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'amap://styles/1de318cbb8d12c02303a22c550b9ccc9'</span>,</span></span><br><span class="line">            zoom: 11,</span><br><span class="line"><span class="actionscript">            center: [<span class="number">120.168109</span>,<span class="number">35.943654</span>], <span class="comment">// 青岛</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// zoom: 15,</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// center: [121.37553692,28.3687836300], // 温岭</span></span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'dark'</span>,</span></span><br><span class="line"><span class="actionscript">			features: [<span class="string">'bg'</span>,<span class="string">'point'</span>],</span></span><br><span class="line"><span class="actionscript">            resizeEnable: <span class="literal">true</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//输入提示</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> autoOptions = &#123;</span></span><br><span class="line"><span class="actionscript">            input: <span class="string">"tipinput"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        AMap.plugin([<span class="string">'AMap.Autocomplete'</span>,<span class="string">'AMap.PlaceSearch'</span>,<span class="string">'AMap.MapType'</span>],<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> auto = <span class="keyword">new</span> AMap.Autocomplete(autoOptions);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> placeSearch = <span class="keyword">new</span> AMap.PlaceSearch(&#123;</span></span><br><span class="line">                map: map</span><br><span class="line"><span class="actionscript">            &#125;);  <span class="comment">//构造地点查询类</span></span></span><br><span class="line"><span class="actionscript">            AMap.event.addListener(auto, <span class="string">"select"</span>, select);<span class="comment">//注册监听，当选中某条记录时会触发</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">                placeSearch.setCity(e.poi.adcode);</span><br><span class="line"><span class="actionscript">                placeSearch.search(e.poi.name);  <span class="comment">//关键字查询查询</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            map.addControl(<span class="keyword">new</span> AMap.MapType());</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> Loca.LineLayer(&#123;</span></span><br><span class="line">            map: map</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">		<span class="keyword">var</span> colors = [<span class="string">'#07E8E4'</span>,<span class="string">'#1f78b4'</span>,<span class="string">'#b2df8a'</span>,<span class="string">'#33a02c'</span>,<span class="string">'#fb9a99'</span>,<span class="string">'#e31a1c'</span>,<span class="string">'#fdbf6f'</span>,<span class="string">'#ff7f00'</span>,<span class="string">'#D1E87D'</span>,<span class="string">'#AD92D1'</span>,<span class="string">'#3346BD'</span>,<span class="string">'#EBEB8D'</span>,<span class="string">'#7FC97F'</span>];</span></span><br><span class="line"></span><br><span class="line">        layer.setData(lines, &#123;</span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'lnglat'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setOptions(&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line">                borderWidth: 3,</span><br><span class="line">                opacity: 1,</span><br><span class="line"><span class="actionscript">                color: <span class="function"><span class="keyword">function</span><span class="params">(v)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> id = v.value.line_id;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> len = colors.length;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> colors[id % len];</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">		<span class="comment">// 渲染</span></span></span><br><span class="line">		layer.render();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考: <a href="https://lbs.amap.com/api/loca-api/demos/line/bj_busline_colors" target="_blank" rel="noopener">高德地图 API 分类路径示例</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://cyh42.github.io/Blog-Back-Up/map/run">跑步轨迹</a></p>
<p><img src="/article/run-track/Qingdao.jpg" alt></p>
<p><img src="/article/run-track/Wenling.jpg" alt></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 和高德地图 API 绘制我的足迹</title>
    <url>/article/track/</url>
    <content><![CDATA[<p>最近3年多去了不少城市，拍了不少照片，因此萌生了写个程序提取照片位置信息，转换为轨迹点画在一张地图上的想法。</p>
<a id="more"></a>

<h2 id="导出-GPX-文件"><a href="#导出-GPX-文件" class="headerlink" title="导出 GPX 文件"></a>导出 GPX 文件</h2><p>使用 GeoSetter 软件批量提取并导出图像 GPS 信息，保存为 GPX 文件，下面是一段 .gpx 文件的记录点格式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trkpt</span> <span class="attr">lat</span>=<span class="string">"35.94073611"</span> <span class="attr">lon</span>=<span class="string">"120.17107500"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span>2017-10-19T20:40:31Z<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ele</span>&gt;</span>11.170000<span class="tag">&lt;/<span class="name">ele</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">speed</span>&gt;</span>0.000000<span class="tag">&lt;/<span class="name">speed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span>293.078156<span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trkpt</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="读取-GPX-文件数据"><a href="#读取-GPX-文件数据" class="headerlink" title="读取 GPX 文件数据"></a>读取 GPX 文件数据</h2><p>直接使用 Python 自带的 xml 库完成读取 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdom</span><br><span class="line"></span><br><span class="line">dom_tree = xdom.parse(os.path.join(filePath, gpxPath))</span><br><span class="line">collection = dom_tree.documentElement</span><br><span class="line">trkpts = collection.getElementsByTagName(<span class="string">"trkpt"</span>)</span><br><span class="line">data = <span class="string">""</span></span><br><span class="line">rets = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> trkpt <span class="keyword">in</span> trkpts:</span><br><span class="line">    lat = trkpt.getAttribute(<span class="string">"lat"</span>)</span><br><span class="line">    lon = trkpt.getAttribute(<span class="string">"lon"</span>)</span><br><span class="line">    <span class="keyword">if</span> lat == <span class="string">'0'</span> <span class="keyword">or</span> lon == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    ret = wgs84_to_gcj02(float(lon), float(lat))</span><br><span class="line">    rets.append(ret)</span><br><span class="line">    data = data + <span class="string">"&#123; 'center': '"</span> + str(ret[<span class="number">0</span>]) + <span class="string">","</span> + str(ret[<span class="number">1</span>]) + <span class="string">"' &#125;,\n"</span></span><br></pre></td></tr></table></figure>

<h2 id="WGS84-转-GCJ02，解决高德坐标偏移"><a href="#WGS84-转-GCJ02，解决高德坐标偏移" class="headerlink" title="WGS84 转 GCJ02，解决高德坐标偏移"></a>WGS84 转 GCJ02，解决高德坐标偏移</h2><p>做过地图相关开发的同学肯定会遇到这样一个问题：同样的经纬度坐标，在谷歌地图和高德地图上的位置是不一样的。</p>
<h3 id="常用地图坐标系介绍"><a href="#常用地图坐标系介绍" class="headerlink" title="常用地图坐标系介绍"></a>常用地图坐标系介绍</h3><ul>
<li>WGS-84：是使用最广泛的坐标系，也是世界通用的坐标系，GPS 设备得到的经纬度就是在 WGS84 坐标系下的经纬度。通常底层接口（ HTML5 Geolocation 或 iOS、安卓 API ）得到的定位信息都是 WGS84 坐标系。</li>
<li>GCJ-02：又被称为火星坐标系，中国坐标偏移标准，高德地图、腾讯地图以及 Google 中国区地图使用。</li>
<li>BD-09 ：百度坐标偏移标准，百度地图使用。</li>
</ul>
<h3 id="Python-实现-GPS-偏移校正-WGS-84-到-GCJ-02"><a href="#Python-实现-GPS-偏移校正-WGS-84-到-GCJ-02" class="headerlink" title="Python 实现 GPS 偏移校正 ( WGS-84 ) 到 ( GCJ-02 )"></a>Python 实现 GPS 偏移校正 ( WGS-84 ) 到 ( GCJ-02 )</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br></pre></td></tr></table></figure>

<h2 id="输出-JS-文件"><a href="#输出-JS-文件" class="headerlink" title="输出 JS 文件"></a>输出 JS 文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">jsDir = os.path.abspath(<span class="string">'./js'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(jsDir):</span><br><span class="line">    os.mkdir(jsDir)</span><br><span class="line">jsonPath = os.path.join(jsDir, gpxPath) + <span class="string">'.js'</span></span><br><span class="line"><span class="keyword">with</span> open(jsonPath, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<p>为了方便的处理多条数据，把上面 Python 的部分写成一个 procXml 函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    filePath = os.path.abspath(<span class="string">'./gpxs'</span>)</span><br><span class="line">    fileList = os.listdir(filePath)</span><br><span class="line">    <span class="keyword">for</span> gpxPath <span class="keyword">in</span> fileList:</span><br><span class="line">        print(<span class="string">'Processing '</span> + str(gpxPath))</span><br><span class="line">        procXml(filePath, gpxPath)</span><br><span class="line">        print(<span class="string">'Coresponding JS file was generated.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="对位置数据进行可视化展示"><a href="#对位置数据进行可视化展示" class="headerlink" title="对位置数据进行可视化展示"></a>对位置数据进行可视化展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的足迹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cache.amap.com/lbs/static/main1119.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myPageTop"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入关键字：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"tipinput"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/loca?v=1.3.2&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./data.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cache.amap.com/lbs/static/addToolbar.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'amap://styles/1de318cbb8d12c02303a22c550b9ccc9'</span>,</span></span><br><span class="line">            zoom: 5,</span><br><span class="line">            center: [112.12255, 35.2044],</span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'dark'</span>,</span></span><br><span class="line"><span class="actionscript">            features: [<span class="string">'bg'</span>, <span class="string">'road'</span>, <span class="string">'point'</span>],</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> Loca.PointLayer(&#123;</span></span><br><span class="line">            map: map</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setData(districts, &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 指定经纬度所在字段</span></span></span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'center'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setOptions(&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 圆形半径，单位像素</span></span></span><br><span class="line">                radius: 2.5,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 填充颜色</span></span></span><br><span class="line"><span class="actionscript">                color: <span class="string">'#14B4C9'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 描边颜色</span></span></span><br><span class="line"><span class="actionscript">                borderColor: <span class="string">'#14B4C9'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 描边宽度，单位像素</span></span></span><br><span class="line">                borderWidth: 1,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 透明度 [0-1]</span></span></span><br><span class="line">                opacity: 0.9,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.render();</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//输入提示</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> autoOptions = &#123;</span></span><br><span class="line"><span class="actionscript">            input: <span class="string">"tipinput"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        AMap.plugin([<span class="string">'AMap.Autocomplete'</span>,<span class="string">'AMap.PlaceSearch'</span>,<span class="string">'AMap.MapType'</span>],<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> auto = <span class="keyword">new</span> AMap.Autocomplete(autoOptions);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> placeSearch = <span class="keyword">new</span> AMap.PlaceSearch(&#123;</span></span><br><span class="line">                map: map</span><br><span class="line"><span class="actionscript">            &#125;);  <span class="comment">//构造地点查询类</span></span></span><br><span class="line"><span class="actionscript">            AMap.event.addListener(auto, <span class="string">"select"</span>, select);<span class="comment">//注册监听，当选中某条记录时会触发</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">                placeSearch.setCity(e.poi.adcode);</span><br><span class="line"><span class="actionscript">                placeSearch.search(e.poi.name);  <span class="comment">//关键字查询查询</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            map.addControl(<span class="keyword">new</span> AMap.MapType());</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考: <a href="https://lbs.amap.com/api/loca-api/demos/scatter/scatter_citys" target="_blank" rel="noopener">高德地图 API 散点示例</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://cyh42.github.io/Blog-Back-Up/map/track">我的足迹</a></p>
<p><img src="/article/track/CHN.jpg" alt></p>
<p><img src="/article/track/TAO.jpg" alt></p>
<p><img src="/article/track/UPC.jpg" alt></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>保研经验分享：如果当时选择了放弃，我可能会后悔一辈子</title>
    <url>/article/tm/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码" />
    <label for="pass">请输入密码</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>保研</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/article/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
