<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记录我去过的和想去的地方</title>
    <url>/article/footprint/</url>
    <content><![CDATA[<p>旅行列表&amp;心愿名单</p>
<a id="more"></a>

<h2 id="旅行列表"><a href="#旅行列表" class="headerlink" title="旅行列表"></a>旅行列表</h2><table>
<thead>
<tr>
<th>日期</th>
<th>省份</th>
<th>城市\地区（景点）</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>2010/8/8-10</td>
<td>上海市</td>
<td>世博会</td>
<td></td>
</tr>
<tr>
<td>2010年8月中旬</td>
<td>浙江省</td>
<td>杭州（西湖）、绍兴（鲁迅故里）</td>
<td></td>
</tr>
<tr>
<td>2015/7/21-24</td>
<td>福建省</td>
<td>厦门（厦门大学、嘉庚公园、鼓浪屿、曾厝垵）</td>
<td></td>
</tr>
<tr>
<td>2016/7/5-6</td>
<td>浙江省</td>
<td>西塘</td>
<td></td>
</tr>
<tr>
<td>2016/7/7</td>
<td>浙江省</td>
<td>乌镇</td>
<td></td>
</tr>
<tr>
<td>2016/7/8-9</td>
<td>上海市</td>
<td>城隍庙、东方明珠、外滩、同济、复旦、上交</td>
<td></td>
</tr>
<tr>
<td>2016/9/2<br>2017/7/6</td>
<td>江苏省</td>
<td>南京（鼓楼、中山陵、夫子庙、南大、东南）</td>
<td></td>
</tr>
<tr>
<td>2018/7/10-18</td>
<td>山东省</td>
<td>东营（石油大学）</td>
<td>实习</td>
</tr>
<tr>
<td>2018/7/23-28</td>
<td>河南省</td>
<td>洛阳（一拖、丽景门、龙门石窟）、巩义市</td>
<td>实习</td>
</tr>
<tr>
<td>2019/6/30-7/4</td>
<td>湖北省</td>
<td>武汉（华科、黄鹤楼、长江大桥、龟山）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/5-7</td>
<td>陕西省</td>
<td>西安（西交、钟楼、鼓楼、大明宫）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/8-10</td>
<td>天津市</td>
<td>天津大学、天津之眼、天塔</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/10-14<br>2019/7/20-31</td>
<td>河北省</td>
<td>唐山市曹妃甸区</td>
<td>实习</td>
</tr>
<tr>
<td>2019/7/15-19</td>
<td>安徽省</td>
<td>合肥（中科大）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/8/1</td>
<td>山东省</td>
<td>济南（芙蓉街、大明湖）</td>
<td>换乘</td>
</tr>
<tr>
<td>2019/9/15</td>
<td>北京市</td>
<td>清华、北大、南锣鼓巷、天坛、永定门</td>
<td>预推免</td>
</tr>
<tr>
<td>2019/9/26-28</td>
<td>浙江省</td>
<td>杭州（浙大玉泉校区、西湖、城市阳台）</td>
<td>预推免</td>
</tr>
<tr>
<td>2019/9/28</td>
<td>浙江省</td>
<td>宁波（老外滩、江北天主教堂、解放桥）</td>
<td>转飞机</td>
</tr>
</tbody></table>
<h2 id="心愿名单"><a href="#心愿名单" class="headerlink" title="心愿名单"></a>心愿名单</h2><table>
<thead>
<tr>
<th>目的地</th>
<th>内容</th>
<th>计划时间</th>
</tr>
</thead>
<tbody><tr>
<td>山东泰安</td>
<td>泰山</td>
<td>2020年上半年</td>
</tr>
<tr>
<td>湖南长沙</td>
<td>岳麓山、湖南大学、橘子洲头、茶颜悦色</td>
<td></td>
</tr>
<tr>
<td>成都、重庆</td>
<td>大熊猫基地、火锅、串串</td>
<td></td>
</tr>
<tr>
<td>香港</td>
<td></td>
<td>2021-2023</td>
</tr>
<tr>
<td>澳门</td>
<td>威尼斯人、官也街、大三巴牌坊</td>
<td>2021-2023</td>
</tr>
<tr>
<td>日本</td>
<td>东京、北海道、富士山</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 和高德 API 绘制跑步轨迹</title>
    <url>/article/run-track/</url>
    <content><![CDATA[<p>把2019年在不同地方跑步的轨迹都画在一张地图上，看看过去一年都跑过哪些地方。</p>
<a id="more"></a>

<h2 id="导出-GPX-文件"><a href="#导出-GPX-文件" class="headerlink" title="导出 GPX 文件"></a>导出 GPX 文件</h2><p>第一步，先把各个地方能导出轨迹的都导出来。看了一下 .FIT 、 .TPX 和 .GPX 中，以 GPX 文件结构最简单，于是把轨迹都导成 .gpx 格式文件。</p>
<h2 id="读取-GPX-文件数据"><a href="#读取-GPX-文件数据" class="headerlink" title="读取 GPX 文件数据"></a>读取 GPX 文件数据</h2><p>第二步，用 Python 读入这些 GPX 轨迹信息，处理后再画在地图上，直接使用 Python 自带的 xml 库完成读取，注意要剔除 lat 和 lon 为0的数据点，因为 GPX 是用这种方法来标记暂停的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdom</span><br><span class="line"></span><br><span class="line">dom_tree = xdom.parse(os.path.join(filePath, gpxPath))</span><br><span class="line">collection = dom_tree.documentElement</span><br><span class="line">trkpts = collection.getElementsByTagName(<span class="string">"trkpt"</span>)</span><br><span class="line">data = <span class="string">'&#123;"line_id":"'</span> + gpxPath[:<span class="number">8</span>] + <span class="string">'","lnglat":['</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> trkpt <span class="keyword">in</span> trkpts:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    lat = trkpt.getAttribute(<span class="string">"lat"</span>)</span><br><span class="line">    lon = trkpt.getAttribute(<span class="string">"lon"</span>)</span><br><span class="line">    <span class="keyword">if</span> lat == <span class="string">'0'</span> <span class="keyword">or</span> lon == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    ret = wgs84_to_gcj02(float(lon), float(lat))</span><br><span class="line">    data = data + <span class="string">'['</span> + str(ret[<span class="number">0</span>]) + <span class="string">','</span> + str(ret[<span class="number">1</span>]) + <span class="string">']'</span></span><br><span class="line">    <span class="keyword">if</span>(i &lt; len(trkpts)):</span><br><span class="line">        data = data + <span class="string">','</span></span><br><span class="line">data = data + <span class="string">']&#125;,'</span></span><br></pre></td></tr></table></figure>

<h2 id="WGS84-转-GCJ02，解决高德坐标偏移"><a href="#WGS84-转-GCJ02，解决高德坐标偏移" class="headerlink" title="WGS84 转 GCJ02，解决高德坐标偏移"></a>WGS84 转 GCJ02，解决高德坐标偏移</h2><p>用 Python 实现 GPS 偏移校正，WGS84 转 GCJ02（火星坐标系）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br></pre></td></tr></table></figure>

<h2 id="输出-JSON-文件"><a href="#输出-JSON-文件" class="headerlink" title="输出 JSON 文件"></a>输出 JSON 文件</h2><p>输出 JS 可以方便读取的 JSON 文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">jsonDir = os.path.abspath(<span class="string">'./jsons'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(jsonDir):</span><br><span class="line">    os.mkdir(jsonDir)</span><br><span class="line">jsonPath = os.path.join(jsonDir, gpxPath[:<span class="number">8</span>]) + <span class="string">'.json'</span></span><br><span class="line"><span class="keyword">with</span> open(jsonPath, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<p>为了方便的处理多条数据，把上面 Python 的部分写成一个 procXml 函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    filePath = os.path.abspath(<span class="string">'./gpxs'</span>)</span><br><span class="line">    fileList = os.listdir(filePath)</span><br><span class="line">    <span class="keyword">for</span> gpxPath <span class="keyword">in</span> fileList:</span><br><span class="line">        print(<span class="string">'Processing '</span> + str(gpxPath))</span><br><span class="line">        procXml(filePath, gpxPath)</span><br><span class="line">        print(<span class="string">'Coresponding JSON file was generated.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="对位置数据进行可视化展示"><a href="#对位置数据进行可视化展示" class="headerlink" title="对位置数据进行可视化展示"></a>对位置数据进行可视化展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1.0, user-scalable=no, width=device-width"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>跑步轨迹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cache.amap.com/lbs/static/main1119.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myPageTop"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入关键字：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"tipinput"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=您申请的key值"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/loca?v=1.3.2&amp;key=您申请的key值"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./line.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cache.amap.com/lbs/static/addToolbar.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span>		</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'amap://styles/1de318cbb8d12c02303a22c550b9ccc9'</span>,</span></span><br><span class="line">            zoom: 11,</span><br><span class="line"><span class="actionscript">            center: [<span class="number">120.168109</span>,<span class="number">35.943654</span>], <span class="comment">// 青岛</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// zoom: 15,</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// center: [121.37553692,28.3687836300], // 温岭</span></span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'dark'</span>,</span></span><br><span class="line"><span class="actionscript">			features: [<span class="string">'bg'</span>,<span class="string">'point'</span>],</span></span><br><span class="line"><span class="actionscript">            resizeEnable: <span class="literal">true</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//输入提示</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> autoOptions = &#123;</span></span><br><span class="line"><span class="actionscript">            input: <span class="string">"tipinput"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        AMap.plugin([<span class="string">'AMap.Autocomplete'</span>,<span class="string">'AMap.PlaceSearch'</span>,<span class="string">'AMap.MapType'</span>],<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> auto = <span class="keyword">new</span> AMap.Autocomplete(autoOptions);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> placeSearch = <span class="keyword">new</span> AMap.PlaceSearch(&#123;</span></span><br><span class="line">                map: map</span><br><span class="line"><span class="actionscript">            &#125;);  <span class="comment">//构造地点查询类</span></span></span><br><span class="line"><span class="actionscript">            AMap.event.addListener(auto, <span class="string">"select"</span>, select);<span class="comment">//注册监听，当选中某条记录时会触发</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">                placeSearch.setCity(e.poi.adcode);</span><br><span class="line"><span class="actionscript">                placeSearch.search(e.poi.name);  <span class="comment">//关键字查询查询</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            map.addControl(<span class="keyword">new</span> AMap.MapType());</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> Loca.LineLayer(&#123;</span></span><br><span class="line">            map: map</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">		<span class="keyword">var</span> colors = [<span class="string">'#07E8E4'</span>,<span class="string">'#1f78b4'</span>,<span class="string">'#b2df8a'</span>,<span class="string">'#33a02c'</span>,<span class="string">'#fb9a99'</span>,<span class="string">'#e31a1c'</span>,<span class="string">'#fdbf6f'</span>,<span class="string">'#ff7f00'</span>,<span class="string">'#D1E87D'</span>,<span class="string">'#AD92D1'</span>,<span class="string">'#3346BD'</span>,<span class="string">'#EBEB8D'</span>,<span class="string">'#7FC97F'</span>];</span></span><br><span class="line"></span><br><span class="line">        layer.setData(lines, &#123;</span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'lnglat'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setOptions(&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line">                borderWidth: 3,</span><br><span class="line">                opacity: 1,</span><br><span class="line"><span class="actionscript">                color: <span class="function"><span class="keyword">function</span><span class="params">(v)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> id = v.value.line_id;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> len = colors.length;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> colors[id % len];</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">		<span class="comment">// 渲染</span></span></span><br><span class="line">		layer.render();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考: <a href="https://lbs.amap.com/api/loca-api/demos/line/bj_busline_colors" target="_blank" rel="noopener">高德地图 API 分类路径示例</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://cyh42.github.io/Blog-Back-Up/map/run">跑步轨迹</a></p>
<p><img src="/article/run-track/Qingdao.jpg" alt></p>
<p><img src="/article/run-track/Wenling.jpg" alt></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 和高德地图 API 绘制我的足迹</title>
    <url>/article/track/</url>
    <content><![CDATA[<p>最近3年多去了不少城市，拍了不少照片，因此萌生了写个程序提取照片位置信息，转换为轨迹点画在一张地图上的想法。</p>
<a id="more"></a>

<h2 id="导出-GPX-文件"><a href="#导出-GPX-文件" class="headerlink" title="导出 GPX 文件"></a>导出 GPX 文件</h2><p>使用 GeoSetter 软件批量提取并导出图像 GPS 信息，保存为 GPX 文件，下面是一段 .gpx 文件的记录点格式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trkpt</span> <span class="attr">lat</span>=<span class="string">"35.94073611"</span> <span class="attr">lon</span>=<span class="string">"120.17107500"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span>2017-10-19T20:40:31Z<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ele</span>&gt;</span>11.170000<span class="tag">&lt;/<span class="name">ele</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">speed</span>&gt;</span>0.000000<span class="tag">&lt;/<span class="name">speed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span>293.078156<span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trkpt</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="读取-GPX-文件数据"><a href="#读取-GPX-文件数据" class="headerlink" title="读取 GPX 文件数据"></a>读取 GPX 文件数据</h2><p>直接使用 Python 自带的 xml 库完成读取 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdom</span><br><span class="line"></span><br><span class="line">dom_tree = xdom.parse(os.path.join(filePath, gpxPath))</span><br><span class="line">collection = dom_tree.documentElement</span><br><span class="line">trkpts = collection.getElementsByTagName(<span class="string">"trkpt"</span>)</span><br><span class="line">data = <span class="string">""</span></span><br><span class="line">rets = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> trkpt <span class="keyword">in</span> trkpts:</span><br><span class="line">    lat = trkpt.getAttribute(<span class="string">"lat"</span>)</span><br><span class="line">    lon = trkpt.getAttribute(<span class="string">"lon"</span>)</span><br><span class="line">    <span class="keyword">if</span> lat == <span class="string">'0'</span> <span class="keyword">or</span> lon == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    ret = wgs84_to_gcj02(float(lon), float(lat))</span><br><span class="line">    rets.append(ret)</span><br><span class="line">    data = data + <span class="string">"&#123; 'center': '"</span> + str(ret[<span class="number">0</span>]) + <span class="string">","</span> + str(ret[<span class="number">1</span>]) + <span class="string">"' &#125;,\n"</span></span><br></pre></td></tr></table></figure>

<h2 id="WGS84-转-GCJ02，解决高德坐标偏移"><a href="#WGS84-转-GCJ02，解决高德坐标偏移" class="headerlink" title="WGS84 转 GCJ02，解决高德坐标偏移"></a>WGS84 转 GCJ02，解决高德坐标偏移</h2><p>做过地图相关开发的同学肯定会遇到这样一个问题：同样的经纬度坐标，在谷歌地图和高德地图上的位置是不一样的。</p>
<h3 id="常用地图坐标系介绍"><a href="#常用地图坐标系介绍" class="headerlink" title="常用地图坐标系介绍"></a>常用地图坐标系介绍</h3><ul>
<li>WGS-84：是使用最广泛的坐标系，也是世界通用的坐标系，GPS 设备得到的经纬度就是在 WGS84 坐标系下的经纬度。通常底层接口（ HTML5 Geolocation 或 iOS、安卓 API ）得到的定位信息都是 WGS84 坐标系。</li>
<li>GCJ-02：又被称为火星坐标系，中国坐标偏移标准，高德地图、腾讯地图以及 Google 中国区地图使用。</li>
<li>BD-09 ：百度坐标偏移标准，百度地图使用。</li>
</ul>
<h3 id="Python-实现-GPS-偏移校正-WGS-84-到-GCJ-02"><a href="#Python-实现-GPS-偏移校正-WGS-84-到-GCJ-02" class="headerlink" title="Python 实现 GPS 偏移校正 ( WGS-84 ) 到 ( GCJ-02 )"></a>Python 实现 GPS 偏移校正 ( WGS-84 ) 到 ( GCJ-02 )</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br></pre></td></tr></table></figure>

<h2 id="输出-JS-文件"><a href="#输出-JS-文件" class="headerlink" title="输出 JS 文件"></a>输出 JS 文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">jsDir = os.path.abspath(<span class="string">'./js'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(jsDir):</span><br><span class="line">    os.mkdir(jsDir)</span><br><span class="line">jsonPath = os.path.join(jsDir, gpxPath) + <span class="string">'.js'</span></span><br><span class="line"><span class="keyword">with</span> open(jsonPath, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<p>为了方便的处理多条数据，把上面 Python 的部分写成一个 procXml 函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    filePath = os.path.abspath(<span class="string">'./gpxs'</span>)</span><br><span class="line">    fileList = os.listdir(filePath)</span><br><span class="line">    <span class="keyword">for</span> gpxPath <span class="keyword">in</span> fileList:</span><br><span class="line">        print(<span class="string">'Processing '</span> + str(gpxPath))</span><br><span class="line">        procXml(filePath, gpxPath)</span><br><span class="line">        print(<span class="string">'Coresponding JS file was generated.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="对位置数据进行可视化展示"><a href="#对位置数据进行可视化展示" class="headerlink" title="对位置数据进行可视化展示"></a>对位置数据进行可视化展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的足迹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cache.amap.com/lbs/static/main1119.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myPageTop"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入关键字：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"tipinput"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/loca?v=1.3.2&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./data.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cache.amap.com/lbs/static/addToolbar.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'amap://styles/1de318cbb8d12c02303a22c550b9ccc9'</span>,</span></span><br><span class="line">            zoom: 5,</span><br><span class="line">            center: [112.12255, 35.2044],</span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'dark'</span>,</span></span><br><span class="line"><span class="actionscript">            features: [<span class="string">'bg'</span>, <span class="string">'road'</span>, <span class="string">'point'</span>],</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> Loca.PointLayer(&#123;</span></span><br><span class="line">            map: map</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setData(districts, &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 指定经纬度所在字段</span></span></span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'center'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setOptions(&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 圆形半径，单位像素</span></span></span><br><span class="line">                radius: 2.5,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 填充颜色</span></span></span><br><span class="line"><span class="actionscript">                color: <span class="string">'#14B4C9'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 描边颜色</span></span></span><br><span class="line"><span class="actionscript">                borderColor: <span class="string">'#14B4C9'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 描边宽度，单位像素</span></span></span><br><span class="line">                borderWidth: 1,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 透明度 [0-1]</span></span></span><br><span class="line">                opacity: 0.9,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.render();</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//输入提示</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> autoOptions = &#123;</span></span><br><span class="line"><span class="actionscript">            input: <span class="string">"tipinput"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        AMap.plugin([<span class="string">'AMap.Autocomplete'</span>,<span class="string">'AMap.PlaceSearch'</span>,<span class="string">'AMap.MapType'</span>],<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> auto = <span class="keyword">new</span> AMap.Autocomplete(autoOptions);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> placeSearch = <span class="keyword">new</span> AMap.PlaceSearch(&#123;</span></span><br><span class="line">                map: map</span><br><span class="line"><span class="actionscript">            &#125;);  <span class="comment">//构造地点查询类</span></span></span><br><span class="line"><span class="actionscript">            AMap.event.addListener(auto, <span class="string">"select"</span>, select);<span class="comment">//注册监听，当选中某条记录时会触发</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">                placeSearch.setCity(e.poi.adcode);</span><br><span class="line"><span class="actionscript">                placeSearch.search(e.poi.name);  <span class="comment">//关键字查询查询</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            map.addControl(<span class="keyword">new</span> AMap.MapType());</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考: <a href="https://lbs.amap.com/api/loca-api/demos/scatter/scatter_citys" target="_blank" rel="noopener">高德地图 API 散点示例</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://cyh42.github.io/Blog-Back-Up/map/track">我的足迹</a></p>
<p><img src="/article/track/CHN.jpg" alt></p>
<p><img src="/article/track/TAO.jpg" alt></p>
<p><img src="/article/track/UPC.jpg" alt></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>保研经验分享：如果当时选择了放弃，我可能会后悔一辈子</title>
    <url>/article/tm/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码" />
    <label for="pass">请输入密码</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>保研</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/article/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
