<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记录我去过的和想去的地方</title>
    <url>/article/footprint/</url>
    <content><![CDATA[<p>旅行列表&amp;心愿名单</p>
<a id="more"></a>

<h2 id="旅行列表"><a href="#旅行列表" class="headerlink" title="旅行列表"></a>旅行列表</h2><table>
<thead>
<tr>
<th>日期</th>
<th>省份</th>
<th>城市\地区（景点）</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>2010/8/8-10</td>
<td>上海市</td>
<td>世博会</td>
<td></td>
</tr>
<tr>
<td>2010年8月中旬</td>
<td>浙江省</td>
<td>杭州（西湖）、绍兴（鲁迅故里）</td>
<td></td>
</tr>
<tr>
<td>2015/7/21-24</td>
<td>福建省</td>
<td>厦门（厦门大学、嘉庚公园、鼓浪屿、曾厝垵）</td>
<td></td>
</tr>
<tr>
<td>2016/7/5-6</td>
<td>浙江省</td>
<td>西塘</td>
<td></td>
</tr>
<tr>
<td>2016/7/7</td>
<td>浙江省</td>
<td>乌镇</td>
<td></td>
</tr>
<tr>
<td>2016/7/8-9</td>
<td>上海市</td>
<td>城隍庙、东方明珠、外滩、同济、复旦、上交</td>
<td></td>
</tr>
<tr>
<td>2016/9/2<br>2017/7/6</td>
<td>江苏省</td>
<td>南京（鼓楼、中山陵、夫子庙、南大、东南）</td>
<td></td>
</tr>
<tr>
<td>2018/7/10-18</td>
<td>山东省</td>
<td>东营（石油大学）</td>
<td>实习</td>
</tr>
<tr>
<td>2018/7/23-28</td>
<td>河南省</td>
<td>洛阳（一拖、丽景门、龙门石窟）、巩义市</td>
<td>实习</td>
</tr>
<tr>
<td>2019/6/30-7/4</td>
<td>湖北省</td>
<td>武汉（华科、黄鹤楼、长江大桥、龟山）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/5-7</td>
<td>陕西省</td>
<td>西安（西交、钟楼、鼓楼、大明宫）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/8-10</td>
<td>天津市</td>
<td>天津大学、天津之眼、天塔</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/10-14<br>2019/7/20-31</td>
<td>河北省</td>
<td>唐山市曹妃甸区</td>
<td>实习</td>
</tr>
<tr>
<td>2019/7/15-19</td>
<td>安徽省</td>
<td>合肥（中科大）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/8/1</td>
<td>山东省</td>
<td>济南（芙蓉街、大明湖）</td>
<td>换乘</td>
</tr>
<tr>
<td>2019/9/15</td>
<td>北京市</td>
<td>清华、北大、南锣鼓巷、天坛、永定门</td>
<td>预推免</td>
</tr>
<tr>
<td>2019/9/26-28</td>
<td>浙江省</td>
<td>杭州（浙大玉泉校区、西湖、城市阳台）</td>
<td>预推免</td>
</tr>
<tr>
<td>2019/9/28</td>
<td>浙江省</td>
<td>宁波（老外滩、江北天主教堂、解放桥）</td>
<td>转飞机</td>
</tr>
</tbody></table>
<h2 id="心愿名单"><a href="#心愿名单" class="headerlink" title="心愿名单"></a>心愿名单</h2><table>
<thead>
<tr>
<th>目的地</th>
<th>内容</th>
<th>计划时间</th>
</tr>
</thead>
<tbody><tr>
<td>山东泰安</td>
<td>泰山</td>
<td>2020年上半年</td>
</tr>
<tr>
<td>湖南长沙</td>
<td>岳麓山、湖南大学、橘子洲头、茶颜悦色</td>
<td></td>
</tr>
<tr>
<td>成都、重庆</td>
<td>大熊猫基地、火锅、串串</td>
<td></td>
</tr>
<tr>
<td>香港</td>
<td></td>
<td>2021-2023</td>
</tr>
<tr>
<td>澳门</td>
<td>威尼斯人、官也街、大三巴牌坊</td>
<td>2021-2023</td>
</tr>
<tr>
<td>日本</td>
<td>东京、北海道、富士山</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 和高德 API 绘制跑步轨迹</title>
    <url>/article/run-track/</url>
    <content><![CDATA[<p>把2019年在不同地方跑步的轨迹都画在一张地图上，看看过去一年都跑过哪些地方。</p>
<a id="more"></a>

<h2 id="导出-GPX-文件"><a href="#导出-GPX-文件" class="headerlink" title="导出 GPX 文件"></a>导出 GPX 文件</h2><p>第一步，先把各个地方能导出轨迹的都导出来。看了一下 .FIT 、 .TPX 和 .GPX 中，以 GPX 文件结构最简单，于是把轨迹都导成 .gpx 格式文件。</p>
<h2 id="读取-GPX-文件数据"><a href="#读取-GPX-文件数据" class="headerlink" title="读取 GPX 文件数据"></a>读取 GPX 文件数据</h2><p>第二步，用 Python 读入这些 GPX 轨迹信息，处理后再画在地图上，直接使用 Python 自带的 xml 库完成读取，注意要剔除 lat 和 lon 为0的数据点，因为 GPX 是用这种方法来标记暂停的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdom</span><br><span class="line"></span><br><span class="line">gpxPath = <span class="string">'test.gpx'</span></span><br><span class="line">dom_tree = xdom.parse(gpxPath)</span><br><span class="line">collection = dom_tree.documentElement</span><br><span class="line">trkpts = collection.getElementsByTagName(<span class="string">"trkpt"</span>)</span><br><span class="line">data = <span class="string">'&#123;"line_id":"'</span> + gpxPath[<span class="number">31</span>:<span class="number">39</span>] + <span class="string">'","lnglat":['</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> trkpt <span class="keyword">in</span> trkpts:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    lat = trkpt.getAttribute(<span class="string">"lat"</span>)</span><br><span class="line">    lon = trkpt.getAttribute(<span class="string">"lon"</span>)</span><br><span class="line">    <span class="keyword">if</span> lat == <span class="string">'0'</span> <span class="keyword">or</span> lon == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    ret = wgs84_to_gcj02(float(lon), float(lat))</span><br><span class="line">    data = data + <span class="string">'['</span> + str(ret[<span class="number">0</span>]) + <span class="string">','</span> + str(ret[<span class="number">1</span>]) + <span class="string">']'</span></span><br><span class="line">    <span class="keyword">if</span>(i &lt; len(trkpts)):</span><br><span class="line">        data = data + <span class="string">','</span></span><br><span class="line">data = data + <span class="string">']&#125;,'</span></span><br></pre></td></tr></table></figure>

<h2 id="WGS84-转-GCJ02，解决高德坐标偏移"><a href="#WGS84-转-GCJ02，解决高德坐标偏移" class="headerlink" title="WGS84 转 GCJ02，解决高德坐标偏移"></a>WGS84 转 GCJ02，解决高德坐标偏移</h2><p>用 Python 实现 GPS 偏移校正，WGS84 转 GCJ02（火星坐标系）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br></pre></td></tr></table></figure>

<h2 id="输出-JSON-文件"><a href="#输出-JSON-文件" class="headerlink" title="输出 JSON 文件"></a>输出 JSON 文件</h2><p>输出 JS 可以方便读取的 JSON 文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">fileDir, fileName = os.path.split(gpxPath)</span><br><span class="line">jsonDir = os.path.join(fileDir, <span class="string">'jsons'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(jsonDir):</span><br><span class="line">    os.mkdir(jsonDir)</span><br><span class="line"></span><br><span class="line">jsonPath = os.path.join(jsonDir, gpxPath) + <span class="string">'.json'</span></span><br><span class="line"><span class="keyword">with</span> open(jsonPath, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br></pre></td></tr></table></figure>

<p>为了方便的处理多条数据，把上面 Python 的部分写成一个 procXml 函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    filePath = <span class="string">'存放 .gpx 格式文件的文件夹的路径'</span></span><br><span class="line">    fileList = os.listdir(filePath)</span><br><span class="line">    <span class="keyword">for</span> gpxPath <span class="keyword">in</span> fileList:</span><br><span class="line">        print(<span class="string">'Processing'</span>+str(gpxPath))</span><br><span class="line">        procXml(<span class="string">'filePath'</span> + gpxPath)</span><br><span class="line">        print(<span class="string">'Coresponding JSON file was generated.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="对位置数据进行可视化展示"><a href="#对位置数据进行可视化展示" class="headerlink" title="对位置数据进行可视化展示"></a>对位置数据进行可视化展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>跑步轨迹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        html,</span><br><span class="line">        body,</span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> &#123;</span></span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/loca?v=1.3.2&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"line.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span>		</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'amap://styles/1de318cbb8d12c02303a22c550b9ccc9'</span>,</span></span><br><span class="line">            zoom: 11,</span><br><span class="line"><span class="actionscript">            center: [<span class="number">120.168109</span>,<span class="number">35.943654</span>], <span class="comment">// 青岛</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// zoom: 15,</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// center: [121.37553692,28.3687836300], // 温岭</span></span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'dark'</span>,</span></span><br><span class="line"><span class="actionscript">			features: [<span class="string">'bg'</span>,<span class="string">'point'</span>],</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// Loca 自 1.2.0 起 viewMode 模式默认为 3D，如需 2D 模式，请显示配置。</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// viewMode: '3D'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> Loca.LineLayer(&#123;</span></span><br><span class="line">            map: map</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setData(lines, &#123;</span><br><span class="line"><span class="actionscript">			lnglat: <span class="string">'lnglat'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> colors = [<span class="string">'#07E8E4'</span>,<span class="string">'#1f78b4'</span>,<span class="string">'#b2df8a'</span>,<span class="string">'#33a02c'</span>,<span class="string">'#fb9a99'</span>,<span class="string">'#e31a1c'</span>,<span class="string">'#fdbf6f'</span>,<span class="string">'#ff7f00'</span>,<span class="string">'#D1E87D'</span>,<span class="string">'#AD92D1'</span>,<span class="string">'#3346BD'</span>,<span class="string">'#EBEB8D'</span>,<span class="string">'#7FC97F'</span>];</span></span><br><span class="line">        layer.setData(lines, &#123;</span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'lnglat'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setOptions(&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line">                borderWidth: 3,</span><br><span class="line">                opacity: 1,</span><br><span class="line"><span class="actionscript">                color: <span class="function"><span class="keyword">function</span><span class="params">(v)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> id = v.value.line_id;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> len = colors.length;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> colors[id % len];</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 渲染</span></span></span><br><span class="line">        layer.render();</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考: <a href="https://lbs.amap.com/api/loca-api/demos/line/bj_busline_colors" target="_blank" rel="noopener">高德地图 API 分类路径示例</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://cyh42.github.io/Blog-Back-Up/map/run.html">跑步轨迹</a></p>
<p><img src="/article/run-track/Qingdao.jpg" alt></p>
<p><img src="/article/run-track/Wenling.jpg" alt></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 和高德地图 API 绘制我的足迹</title>
    <url>/article/track/</url>
    <content><![CDATA[<p>最近3年多去了不少城市，拍了不少照片，因此萌生了写个程序提取照片位置信息，转换为轨迹点画在一张地图上的想法。</p>
<a id="more"></a>

<h2 id="导出-GPX-文件"><a href="#导出-GPX-文件" class="headerlink" title="导出 GPX 文件"></a>导出 GPX 文件</h2><p>使用 GeoSetter 软件批量提取并导出图像 GPS 信息，保存为 GPX 文件，下面是一段 .gpx 文件的记录点格式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trkpt</span> <span class="attr">lat</span>=<span class="string">"35.94073611"</span> <span class="attr">lon</span>=<span class="string">"120.17107500"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span>2017-10-19T20:40:31Z<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ele</span>&gt;</span>11.170000<span class="tag">&lt;/<span class="name">ele</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">speed</span>&gt;</span>0.000000<span class="tag">&lt;/<span class="name">speed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span>293.078156<span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trkpt</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="读取-GPX-文件数据"><a href="#读取-GPX-文件数据" class="headerlink" title="读取 GPX 文件数据"></a>读取 GPX 文件数据</h2><p>直接使用 Python 自带的 xml 库完成读取 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdom</span><br><span class="line"></span><br><span class="line">gpxPath = <span class="string">'test.gpx'</span></span><br><span class="line">dom_tree = xdom.parse(gpxPath)</span><br><span class="line">collection = dom_tree.documentElement</span><br><span class="line">trkpts = collection.getElementsByTagName(<span class="string">"trkpt"</span>)</span><br><span class="line">data = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> trkpt <span class="keyword">in</span> trkpts:</span><br><span class="line">    lat = trkpt.getAttribute(<span class="string">"lat"</span>)</span><br><span class="line">    lon = trkpt.getAttribute(<span class="string">"lon"</span>)</span><br><span class="line">    <span class="keyword">if</span> lat==<span class="string">'0'</span> <span class="keyword">or</span> lon==<span class="string">'0'</span>:</span><br><span class="line">    	<span class="keyword">continue</span></span><br><span class="line">    ret = wgs84_to_gcj02(float(lon), float(lat))</span><br><span class="line">    data = data + <span class="string">"&#123; 'center': '"</span> + str(ret[<span class="number">0</span>]) + <span class="string">","</span> + str(ret[<span class="number">1</span>]) + <span class="string">"' &#125;,\n"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(gpxPath + <span class="string">'.js'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<h2 id="WGS84-转-GCJ02，解决高德坐标偏移"><a href="#WGS84-转-GCJ02，解决高德坐标偏移" class="headerlink" title="WGS84 转 GCJ02，解决高德坐标偏移"></a>WGS84 转 GCJ02，解决高德坐标偏移</h2><p>做过地图相关开发的同学肯定会遇到这样一个问题：同样的经纬度坐标，在谷歌地图和高德地图上的位置是不一样的。</p>
<h3 id="常用地图坐标系介绍"><a href="#常用地图坐标系介绍" class="headerlink" title="常用地图坐标系介绍"></a>常用地图坐标系介绍</h3><ul>
<li>WGS-84：是使用最广泛的坐标系，也是世界通用的坐标系，GPS 设备得到的经纬度就是在 WGS84 坐标系下的经纬度。通常底层接口（ HTML5 Geolocation 或 iOS、安卓 API ）得到的定位信息都是 WGS84 坐标系。</li>
<li>GCJ-02：又被称为火星坐标系，中国坐标偏移标准，高德地图、腾讯地图以及 Google 中国区地图使用。</li>
<li>BD-09 ：百度坐标偏移标准，百度地图使用。</li>
</ul>
<h3 id="Python-实现-GPS-偏移校正-WGS-84-到-GCJ-02"><a href="#Python-实现-GPS-偏移校正-WGS-84-到-GCJ-02" class="headerlink" title="Python 实现 GPS 偏移校正 ( WGS-84 ) 到 ( GCJ-02 )"></a>Python 实现 GPS 偏移校正 ( WGS-84 ) 到 ( GCJ-02 )</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br></pre></td></tr></table></figure>

<h2 id="对位置数据进行可视化展示"><a href="#对位置数据进行可视化展示" class="headerlink" title="对位置数据进行可视化展示"></a>对位置数据进行可视化展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的足迹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        html,</span><br><span class="line">        body,</span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> &#123;</span></span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/loca?v=1.3.2&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./data.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'amap://styles/1de318cbb8d12c02303a22c550b9ccc9'</span>,</span></span><br><span class="line">            zoom: 5,</span><br><span class="line">            center: [112.12255, 35.2044],</span><br><span class="line"><span class="actionscript">			mapStyle: <span class="string">'dark'</span>,</span></span><br><span class="line"><span class="actionscript">			features: [<span class="string">'bg'</span>, <span class="string">'road'</span>, <span class="string">'point'</span>],</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// Loca 自 1.2.0 起 viewMode 模式默认为 3D，如需 2D 模式，请显示配置。</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// viewMode: '3D'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> Loca.PointLayer(&#123;</span></span><br><span class="line">            map: map</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setData(districts, &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 指定经纬度所在字段</span></span></span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'center'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setOptions(&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 圆形半径，单位像素</span></span></span><br><span class="line">                radius: 2.5,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 填充颜色</span></span></span><br><span class="line"><span class="actionscript">                color: <span class="string">'#14B4C9'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 描边颜色</span></span></span><br><span class="line"><span class="actionscript">                borderColor: <span class="string">'#14B4C9'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 描边宽度，单位像素</span></span></span><br><span class="line">                borderWidth: 1,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 透明度 [0-1]</span></span></span><br><span class="line">                opacity: 0.9,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.render();</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考: <a href="https://lbs.amap.com/api/loca-api/demos/scatter/scatter_citys" target="_blank" rel="noopener">高德地图 API 散点示例</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://cyh42.github.io/Blog-Back-Up/map/track.html">我的足迹</a></p>
<p><img src="/article/track/CHN.jpg" alt></p>
<p><img src="/article/track/TAO.jpg" alt></p>
<p><img src="/article/track/UPC.jpg" alt></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>保研经验分享：如果当时选择了放弃，我可能会后悔一辈子</title>
    <url>/article/tm/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码" />
    <label for="pass">请输入密码</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>保研</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/article/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
