<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记录我去过的和想去的地方</title>
    <url>/article/footprint/</url>
    <content><![CDATA[<p>旅行列表&amp;心愿名单</p>
<a id="more"></a>

<h2 id="旅行列表"><a href="#旅行列表" class="headerlink" title="旅行列表"></a>旅行列表</h2><table>
<thead>
<tr>
<th>日期</th>
<th>省份</th>
<th>城市\地区（景点）</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>2010/8/8-10</td>
<td>上海市</td>
<td>世博会</td>
<td></td>
</tr>
<tr>
<td>2010年8月中旬</td>
<td>浙江省</td>
<td>杭州（西湖）、绍兴（鲁迅故里）</td>
<td></td>
</tr>
<tr>
<td>2015/7/21-24</td>
<td>福建省</td>
<td>厦门（厦门大学、嘉庚公园、鼓浪屿、曾厝垵）</td>
<td></td>
</tr>
<tr>
<td>2016/7/5-6</td>
<td>浙江省</td>
<td>西塘</td>
<td></td>
</tr>
<tr>
<td>2016/7/7</td>
<td>浙江省</td>
<td>乌镇</td>
<td></td>
</tr>
<tr>
<td>2016/7/8-9</td>
<td>上海市</td>
<td>城隍庙、东方明珠、外滩、同济、复旦、上交</td>
<td></td>
</tr>
<tr>
<td>2016/9/2<br>2017/7/6</td>
<td>江苏省</td>
<td>南京（鼓楼、中山陵、夫子庙、南大、东南）</td>
<td></td>
</tr>
<tr>
<td>2018/7/10-18</td>
<td>山东省</td>
<td>东营（石油大学）</td>
<td>实习</td>
</tr>
<tr>
<td>2018/7/23-28</td>
<td>河南省</td>
<td>洛阳（一拖、丽景门、龙门石窟）、巩义市</td>
<td>实习</td>
</tr>
<tr>
<td>2019/6/30-7/4</td>
<td>湖北省</td>
<td>武汉（华科、黄鹤楼、长江大桥、龟山）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/5-7</td>
<td>陕西省</td>
<td>西安（西交、钟楼、鼓楼、大明宫）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/8-10</td>
<td>天津市</td>
<td>天津大学、天津之眼、天塔</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/10-14<br>2019/7/20-31</td>
<td>河北省</td>
<td>唐山市曹妃甸区</td>
<td>实习</td>
</tr>
<tr>
<td>2019/7/15-19</td>
<td>安徽省</td>
<td>合肥（中科大）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/8/1</td>
<td>山东省</td>
<td>济南（芙蓉街、大明湖）</td>
<td>换乘</td>
</tr>
<tr>
<td>2019/9/15</td>
<td>北京市</td>
<td>清华、北大、南锣鼓巷、天坛、永定门</td>
<td>预推免</td>
</tr>
<tr>
<td>2019/9/26-28</td>
<td>浙江省</td>
<td>杭州（浙大玉泉校区、西湖、城市阳台）</td>
<td>预推免</td>
</tr>
<tr>
<td>2019/9/28</td>
<td>浙江省</td>
<td>宁波（老外滩、江北天主教堂、解放桥）</td>
<td>转飞机</td>
</tr>
</tbody></table>
<h2 id="心愿名单"><a href="#心愿名单" class="headerlink" title="心愿名单"></a>心愿名单</h2><table>
<thead>
<tr>
<th>目的地</th>
<th>内容</th>
<th>计划时间</th>
</tr>
</thead>
<tbody><tr>
<td>山东泰安</td>
<td>泰山</td>
<td>2020年上半年</td>
</tr>
<tr>
<td>湖南长沙</td>
<td>岳麓山、湖南大学、橘子洲头、茶颜悦色</td>
<td></td>
</tr>
<tr>
<td>成都、重庆</td>
<td>大熊猫基地、火锅、串串</td>
<td></td>
</tr>
<tr>
<td>香港</td>
<td></td>
<td>2021-2023</td>
</tr>
<tr>
<td>澳门</td>
<td>威尼斯人、官也街、大三巴牌坊</td>
<td>2021-2023</td>
</tr>
<tr>
<td>日本</td>
<td>东京、北海道、富士山</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 和高德 API 绘制跑步轨迹</title>
    <url>/article/run-track/</url>
    <content><![CDATA[<p>把2019年在不同地方跑步的轨迹都画在一张地图上，看看过去一年都跑过哪些地方。</p>
<a id="more"></a>

<h2 id="导出-GPX-文件"><a href="#导出-GPX-文件" class="headerlink" title="导出 GPX 文件"></a>导出 GPX 文件</h2><p>第一步，先把各个地方能导出轨迹的都导出来。看了一下 .FIT 、 .TPX 和 .GPX 中，以 GPX 文件结构最简单，于是把轨迹都导成 .gpx 格式文件。</p>
<h2 id="读取-GPX-文件数据"><a href="#读取-GPX-文件数据" class="headerlink" title="读取 GPX 文件数据"></a>读取 GPX 文件数据</h2><p>第二步，用 Python 读入这些 GPX 轨迹信息，处理后再画在地图上，直接使用 Python 自带的 xml 库完成读取，注意要剔除 lat 和 lon 为0的数据点，因为 GPX 是用这种方法来标记暂停的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdom</span><br><span class="line"></span><br><span class="line">dom_tree = xdom.parse(os.path.join(filePath, gpxPath))</span><br><span class="line">collection = dom_tree.documentElement</span><br><span class="line">trkpts = collection.getElementsByTagName(<span class="string">"trkpt"</span>)</span><br><span class="line">data = <span class="string">'&#123;"line_id":"'</span> + gpxPath[<span class="number">31</span>:<span class="number">39</span>] + <span class="string">'","lnglat":['</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> trkpt <span class="keyword">in</span> trkpts:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    lat = trkpt.getAttribute(<span class="string">"lat"</span>)</span><br><span class="line">    lon = trkpt.getAttribute(<span class="string">"lon"</span>)</span><br><span class="line">    <span class="keyword">if</span> lat == <span class="string">'0'</span> <span class="keyword">or</span> lon == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    ret = wgs84_to_gcj02(float(lon), float(lat))</span><br><span class="line">    data = data + <span class="string">'['</span> + str(ret[<span class="number">0</span>]) + <span class="string">','</span> + str(ret[<span class="number">1</span>]) + <span class="string">']'</span></span><br><span class="line">    <span class="keyword">if</span>(i &lt; len(trkpts)):</span><br><span class="line">        data = data + <span class="string">','</span></span><br><span class="line">data = data + <span class="string">']&#125;,'</span></span><br></pre></td></tr></table></figure>

<h2 id="WGS84-转-GCJ02，解决高德坐标偏移"><a href="#WGS84-转-GCJ02，解决高德坐标偏移" class="headerlink" title="WGS84 转 GCJ02，解决高德坐标偏移"></a>WGS84 转 GCJ02，解决高德坐标偏移</h2><p>用 Python 实现 GPS 偏移校正，WGS84 转 GCJ02（火星坐标系）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br></pre></td></tr></table></figure>

<h2 id="输出-JSON-文件"><a href="#输出-JSON-文件" class="headerlink" title="输出 JSON 文件"></a>输出 JSON 文件</h2><p>输出 JS 可以方便读取的 JSON 文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">jsonDir = os.path.abspath(<span class="string">'./jsons'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(jsonDir):</span><br><span class="line">    os.mkdir(jsonDir)</span><br><span class="line">jsonPath = os.path.join(jsonDir, gpxPath) + <span class="string">'.json'</span></span><br><span class="line"><span class="keyword">with</span> open(jsonPath, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<p>为了方便的处理多条数据，把上面 Python 的部分写成一个 procXml 函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    filePath = os.path.abspath(<span class="string">'./gpxs'</span>)</span><br><span class="line">    fileList = os.listdir(filePath)</span><br><span class="line">    <span class="keyword">for</span> gpxPath <span class="keyword">in</span> fileList:</span><br><span class="line">        print(<span class="string">'Processing '</span> + str(gpxPath))</span><br><span class="line">        procXml(filePath, gpxPath)</span><br><span class="line">        print(<span class="string">'Coresponding JSON file was generated.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="对位置数据进行可视化展示"><a href="#对位置数据进行可视化展示" class="headerlink" title="对位置数据进行可视化展示"></a>对位置数据进行可视化展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1.0, user-scalable=no, width=device-width"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>跑步轨迹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cache.amap.com/lbs/static/main1119.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myPageTop"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入关键字：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"tipinput"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/loca?v=1.3.2&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./line.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cache.amap.com/lbs/static/addToolbar.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span>		</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'amap://styles/1de318cbb8d12c02303a22c550b9ccc9'</span>,</span></span><br><span class="line">            zoom: 11,</span><br><span class="line"><span class="actionscript">            center: [<span class="number">120.168109</span>,<span class="number">35.943654</span>], <span class="comment">// 青岛</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// zoom: 15,</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// center: [121.37553692,28.3687836300], // 温岭</span></span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'dark'</span>,</span></span><br><span class="line"><span class="actionscript">			features: [<span class="string">'bg'</span>,<span class="string">'point'</span>],</span></span><br><span class="line"><span class="actionscript">            resizeEnable: <span class="literal">true</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//输入提示</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> autoOptions = &#123;</span></span><br><span class="line"><span class="actionscript">            input: <span class="string">"tipinput"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        AMap.plugin([<span class="string">'AMap.Autocomplete'</span>,<span class="string">'AMap.PlaceSearch'</span>,<span class="string">'AMap.MapType'</span>],<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> auto = <span class="keyword">new</span> AMap.Autocomplete(autoOptions);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> placeSearch = <span class="keyword">new</span> AMap.PlaceSearch(&#123;</span></span><br><span class="line">                map: map</span><br><span class="line"><span class="actionscript">            &#125;);  <span class="comment">//构造地点查询类</span></span></span><br><span class="line"><span class="actionscript">            AMap.event.addListener(auto, <span class="string">"select"</span>, select);<span class="comment">//注册监听，当选中某条记录时会触发</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">                placeSearch.setCity(e.poi.adcode);</span><br><span class="line"><span class="actionscript">                placeSearch.search(e.poi.name);  <span class="comment">//关键字查询查询</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            map.addControl(<span class="keyword">new</span> AMap.MapType());</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> Loca.LineLayer(&#123;</span></span><br><span class="line">            map: map</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setData(lines, &#123;</span><br><span class="line"><span class="actionscript">			lnglat: <span class="string">'lnglat'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">		<span class="keyword">var</span> colors = [<span class="string">'#07E8E4'</span>,<span class="string">'#1f78b4'</span>,<span class="string">'#b2df8a'</span>,<span class="string">'#33a02c'</span>,<span class="string">'#fb9a99'</span>,<span class="string">'#e31a1c'</span>,<span class="string">'#fdbf6f'</span>,<span class="string">'#ff7f00'</span>,<span class="string">'#D1E87D'</span>,<span class="string">'#AD92D1'</span>,<span class="string">'#3346BD'</span>,<span class="string">'#EBEB8D'</span>,<span class="string">'#7FC97F'</span>];</span></span><br><span class="line">        layer.setData(lines, &#123;</span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'lnglat'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setOptions(&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line">                borderWidth: 3,</span><br><span class="line">                opacity: 1,</span><br><span class="line"><span class="actionscript">                color: <span class="function"><span class="keyword">function</span><span class="params">(v)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> id = v.value.line_id;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> len = colors.length;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> colors[id % len];</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">		<span class="comment">// 渲染</span></span></span><br><span class="line">		layer.render();</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考: <a href="https://lbs.amap.com/api/loca-api/demos/line/bj_busline_colors" target="_blank" rel="noopener">高德地图 API 分类路径示例</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://cyh42.github.io/Blog-Back-Up/map/run.html">跑步轨迹</a></p>
<p><img src="/article/run-track/Qingdao.jpg" alt></p>
<p><img src="/article/run-track/Wenling.jpg" alt></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 和高德地图 API 绘制我的足迹</title>
    <url>/article/track/</url>
    <content><![CDATA[<p>最近3年多去了不少城市，拍了不少照片，因此萌生了写个程序提取照片位置信息，转换为轨迹点画在一张地图上的想法。</p>
<a id="more"></a>

<h2 id="导出-GPX-文件"><a href="#导出-GPX-文件" class="headerlink" title="导出 GPX 文件"></a>导出 GPX 文件</h2><p>使用 GeoSetter 软件批量提取并导出图像 GPS 信息，保存为 GPX 文件，下面是一段 .gpx 文件的记录点格式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trkpt</span> <span class="attr">lat</span>=<span class="string">"35.94073611"</span> <span class="attr">lon</span>=<span class="string">"120.17107500"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span>2017-10-19T20:40:31Z<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ele</span>&gt;</span>11.170000<span class="tag">&lt;/<span class="name">ele</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">speed</span>&gt;</span>0.000000<span class="tag">&lt;/<span class="name">speed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span>293.078156<span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trkpt</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="读取-GPX-文件数据"><a href="#读取-GPX-文件数据" class="headerlink" title="读取 GPX 文件数据"></a>读取 GPX 文件数据</h2><p>直接使用 Python 自带的 xml 库完成读取 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdom</span><br><span class="line"></span><br><span class="line">dom_tree = xdom.parse(os.path.join(filePath, gpxPath))</span><br><span class="line">collection = dom_tree.documentElement</span><br><span class="line">trkpts = collection.getElementsByTagName(<span class="string">"trkpt"</span>)</span><br><span class="line">data = <span class="string">""</span></span><br><span class="line">rets = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> trkpt <span class="keyword">in</span> trkpts:</span><br><span class="line">    lat = trkpt.getAttribute(<span class="string">"lat"</span>)</span><br><span class="line">    lon = trkpt.getAttribute(<span class="string">"lon"</span>)</span><br><span class="line">    <span class="keyword">if</span> lat == <span class="string">'0'</span> <span class="keyword">or</span> lon == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    ret = wgs84_to_gcj02(float(lon), float(lat))</span><br><span class="line">    rets.append(ret)</span><br><span class="line">    data = data + <span class="string">"&#123; 'center': '"</span> + str(ret[<span class="number">0</span>]) + <span class="string">","</span> + str(ret[<span class="number">1</span>]) + <span class="string">"' &#125;,\n"</span></span><br></pre></td></tr></table></figure>

<h2 id="WGS84-转-GCJ02，解决高德坐标偏移"><a href="#WGS84-转-GCJ02，解决高德坐标偏移" class="headerlink" title="WGS84 转 GCJ02，解决高德坐标偏移"></a>WGS84 转 GCJ02，解决高德坐标偏移</h2><p>做过地图相关开发的同学肯定会遇到这样一个问题：同样的经纬度坐标，在谷歌地图和高德地图上的位置是不一样的。</p>
<h3 id="常用地图坐标系介绍"><a href="#常用地图坐标系介绍" class="headerlink" title="常用地图坐标系介绍"></a>常用地图坐标系介绍</h3><ul>
<li>WGS-84：是使用最广泛的坐标系，也是世界通用的坐标系，GPS 设备得到的经纬度就是在 WGS84 坐标系下的经纬度。通常底层接口（ HTML5 Geolocation 或 iOS、安卓 API ）得到的定位信息都是 WGS84 坐标系。</li>
<li>GCJ-02：又被称为火星坐标系，中国坐标偏移标准，高德地图、腾讯地图以及 Google 中国区地图使用。</li>
<li>BD-09 ：百度坐标偏移标准，百度地图使用。</li>
</ul>
<h3 id="Python-实现-GPS-偏移校正-WGS-84-到-GCJ-02"><a href="#Python-实现-GPS-偏移校正-WGS-84-到-GCJ-02" class="headerlink" title="Python 实现 GPS 偏移校正 ( WGS-84 ) 到 ( GCJ-02 )"></a>Python 实现 GPS 偏移校正 ( WGS-84 ) 到 ( GCJ-02 )</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br></pre></td></tr></table></figure>

<h2 id="输出-JS-文件"><a href="#输出-JS-文件" class="headerlink" title="输出 JS 文件"></a>输出 JS 文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">jsDir = os.path.abspath(<span class="string">'./js'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(jsDir):</span><br><span class="line">    os.mkdir(jsDir)</span><br><span class="line">jsonPath = os.path.join(jsDir, gpxPath) + <span class="string">'.js'</span></span><br><span class="line"><span class="keyword">with</span> open(jsonPath, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<p>为了方便的处理多条数据，把上面 Python 的部分写成一个 procXml 函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    filePath = os.path.abspath(<span class="string">'./gpxs'</span>)</span><br><span class="line">    fileList = os.listdir(filePath)</span><br><span class="line">    <span class="keyword">for</span> gpxPath <span class="keyword">in</span> fileList:</span><br><span class="line">        print(<span class="string">'Processing '</span> + str(gpxPath))</span><br><span class="line">        procXml(filePath, gpxPath)</span><br><span class="line">        print(<span class="string">'Coresponding JS file was generated.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="对位置数据进行可视化展示"><a href="#对位置数据进行可视化展示" class="headerlink" title="对位置数据进行可视化展示"></a>对位置数据进行可视化展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的足迹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cache.amap.com/lbs/static/main1119.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myPageTop"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入关键字：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"tipinput"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/loca?v=1.3.2&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./data.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cache.amap.com/lbs/static/addToolbar.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'amap://styles/1de318cbb8d12c02303a22c550b9ccc9'</span>,</span></span><br><span class="line">            zoom: 5,</span><br><span class="line">            center: [112.12255, 35.2044],</span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'dark'</span>,</span></span><br><span class="line"><span class="actionscript">            features: [<span class="string">'bg'</span>, <span class="string">'road'</span>, <span class="string">'point'</span>],</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> Loca.PointLayer(&#123;</span></span><br><span class="line">            map: map</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setData(districts, &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 指定经纬度所在字段</span></span></span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'center'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setOptions(&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 圆形半径，单位像素</span></span></span><br><span class="line">                radius: 2.5,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 填充颜色</span></span></span><br><span class="line"><span class="actionscript">                color: <span class="string">'#14B4C9'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 描边颜色</span></span></span><br><span class="line"><span class="actionscript">                borderColor: <span class="string">'#14B4C9'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 描边宽度，单位像素</span></span></span><br><span class="line">                borderWidth: 1,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 透明度 [0-1]</span></span></span><br><span class="line">                opacity: 0.9,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.render();</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//输入提示</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> autoOptions = &#123;</span></span><br><span class="line"><span class="actionscript">            input: <span class="string">"tipinput"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        AMap.plugin([<span class="string">'AMap.Autocomplete'</span>,<span class="string">'AMap.PlaceSearch'</span>,<span class="string">'AMap.MapType'</span>],<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> auto = <span class="keyword">new</span> AMap.Autocomplete(autoOptions);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> placeSearch = <span class="keyword">new</span> AMap.PlaceSearch(&#123;</span></span><br><span class="line">                map: map</span><br><span class="line"><span class="actionscript">            &#125;);  <span class="comment">//构造地点查询类</span></span></span><br><span class="line"><span class="actionscript">            AMap.event.addListener(auto, <span class="string">"select"</span>, select);<span class="comment">//注册监听，当选中某条记录时会触发</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">                placeSearch.setCity(e.poi.adcode);</span><br><span class="line"><span class="actionscript">                placeSearch.search(e.poi.name);  <span class="comment">//关键字查询查询</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            map.addControl(<span class="keyword">new</span> AMap.MapType());</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考: <a href="https://lbs.amap.com/api/loca-api/demos/scatter/scatter_citys" target="_blank" rel="noopener">高德地图 API 散点示例</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://cyh42.github.io/Blog-Back-Up/map/track.html">我的足迹</a></p>
<p><img src="/article/track/CHN.jpg" alt></p>
<p><img src="/article/track/TAO.jpg" alt></p>
<p><img src="/article/track/UPC.jpg" alt></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>保研经验分享：如果当时选择了放弃，我可能会后悔一辈子</title>
    <url>/article/tm/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码" />
    <label for="pass">请输入密码</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>保研</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/article/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
