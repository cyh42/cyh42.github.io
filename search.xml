<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记录我去过的和想去的地方</title>
    <url>/article/footprint/</url>
    <content><![CDATA[<p>旅行列表&amp;心愿名单</p>
<a id="more"></a>

<h2 id="旅行列表"><a href="#旅行列表" class="headerlink" title="旅行列表"></a>旅行列表</h2><table>
<thead>
<tr>
<th>日期</th>
<th>省份</th>
<th>城市\地区（景点）</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>2010/8/8-10</td>
<td>上海市</td>
<td>世博会</td>
<td></td>
</tr>
<tr>
<td>2010年8月中旬</td>
<td>浙江省</td>
<td>杭州（西湖）、绍兴（鲁迅故里）</td>
<td></td>
</tr>
<tr>
<td>2015/7/21-24</td>
<td>福建省</td>
<td>厦门（厦门大学、嘉庚公园、鼓浪屿、曾厝垵）</td>
<td></td>
</tr>
<tr>
<td>2016/7/5-6</td>
<td>浙江省</td>
<td>西塘</td>
<td></td>
</tr>
<tr>
<td>2016/7/7</td>
<td>浙江省</td>
<td>乌镇</td>
<td></td>
</tr>
<tr>
<td>2016/7/8-9</td>
<td>上海市</td>
<td>城隍庙、东方明珠、外滩、同济、复旦、上交</td>
<td></td>
</tr>
<tr>
<td>2016/9/2<br>2017/7/6</td>
<td>江苏省</td>
<td>南京（鼓楼、中山陵、夫子庙、南大、东南）</td>
<td></td>
</tr>
<tr>
<td>2018/7/10-18</td>
<td>山东省</td>
<td>东营（石油大学）</td>
<td>实习</td>
</tr>
<tr>
<td>2018/7/23-28</td>
<td>河南省</td>
<td>洛阳（一拖、丽景门、龙门石窟）、巩义市</td>
<td>实习</td>
</tr>
<tr>
<td>2019/6/30-7/4</td>
<td>湖北省</td>
<td>武汉（华科、黄鹤楼、长江大桥、龟山）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/5-7</td>
<td>陕西省</td>
<td>西安（西交、钟楼、鼓楼、大明宫）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/8-10</td>
<td>天津市</td>
<td>天津大学、天津之眼、天塔</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/10-14<br>2019/7/20-31</td>
<td>河北省</td>
<td>唐山市曹妃甸区</td>
<td>实习</td>
</tr>
<tr>
<td>2019/7/15-19</td>
<td>安徽省</td>
<td>合肥（中科大）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/8/1</td>
<td>山东省</td>
<td>济南（芙蓉街、大明湖）</td>
<td>换乘</td>
</tr>
<tr>
<td>2019/9/15</td>
<td>北京市</td>
<td>清华、北大、南锣鼓巷、天坛、永定门</td>
<td>预推免</td>
</tr>
<tr>
<td>2019/9/26-28</td>
<td>浙江省</td>
<td>杭州（浙大玉泉校区、西湖、城市阳台）</td>
<td>预推免</td>
</tr>
<tr>
<td>2019/9/28</td>
<td>浙江省</td>
<td>宁波（老外滩、江北天主教堂、解放桥）</td>
<td>转飞机</td>
</tr>
</tbody></table>
<h2 id="心愿名单"><a href="#心愿名单" class="headerlink" title="心愿名单"></a>心愿名单</h2><table>
<thead>
<tr>
<th>目的地</th>
<th>内容</th>
<th>计划时间</th>
</tr>
</thead>
<tbody><tr>
<td>山东泰安</td>
<td>泰山</td>
<td>2020年上半年</td>
</tr>
<tr>
<td>湖南长沙</td>
<td>岳麓山、湖南大学、橘子洲头、茶颜悦色</td>
<td></td>
</tr>
<tr>
<td>成都、重庆</td>
<td>大熊猫基地、火锅、串串</td>
<td></td>
</tr>
<tr>
<td>香港</td>
<td></td>
<td>2021-2023</td>
</tr>
<tr>
<td>澳门</td>
<td>威尼斯人、官也街、大三巴牌坊</td>
<td>2021-2023</td>
</tr>
<tr>
<td>日本</td>
<td>东京、北海道、富士山</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 和高德 API 绘制跑步轨迹</title>
    <url>/article/run-track/</url>
    <content><![CDATA[<p>把2019年在不同地方跑步的轨迹都画在一张地图上，看看过去一年都跑过哪些地方。</p>
<a id="more"></a>

<h2 id="导出-GPX-文件"><a href="#导出-GPX-文件" class="headerlink" title="导出 GPX 文件"></a>导出 GPX 文件</h2><p>第一步，先把各个地方能导出轨迹的都导出来。看了一下 .FIT 、 .TPX 和 .GPX 中，以 GPX 文件结构最简单，于是把轨迹都导成 .gpx 格式文件。</p>
<h2 id="读取-GPX-文件数据"><a href="#读取-GPX-文件数据" class="headerlink" title="读取 GPX 文件数据"></a>读取 GPX 文件数据</h2><p>第二步，用 Python 读入这些 GPX 轨迹信息，处理后再画在地图上，直接使用 Python 自带的 xml 库完成读取，注意要剔除 lat 和 lon 为0的数据点，因为 GPX 是用这种方法来标记暂停的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdom</span><br><span class="line"></span><br><span class="line">dom_tree = xdom.parse(os.path.join(filePath, gpxPath))</span><br><span class="line">collection = dom_tree.documentElement</span><br><span class="line">trkpts = collection.getElementsByTagName(<span class="string">"trkpt"</span>)</span><br><span class="line">data = <span class="string">'&#123;"line_id":"'</span> + gpxPath[<span class="number">31</span>:<span class="number">39</span>] + <span class="string">'","lnglat":['</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> trkpt <span class="keyword">in</span> trkpts:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    lat = trkpt.getAttribute(<span class="string">"lat"</span>)</span><br><span class="line">    lon = trkpt.getAttribute(<span class="string">"lon"</span>)</span><br><span class="line">    <span class="keyword">if</span> lat == <span class="string">'0'</span> <span class="keyword">or</span> lon == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    ret = wgs84_to_gcj02(float(lon), float(lat))</span><br><span class="line">    data = data + <span class="string">'['</span> + str(ret[<span class="number">0</span>]) + <span class="string">','</span> + str(ret[<span class="number">1</span>]) + <span class="string">']'</span></span><br><span class="line">    <span class="keyword">if</span>(i &lt; len(trkpts)):</span><br><span class="line">        data = data + <span class="string">','</span></span><br><span class="line">data = data + <span class="string">']&#125;,'</span></span><br></pre></td></tr></table></figure>

<h2 id="WGS84-转-GCJ02，解决高德坐标偏移"><a href="#WGS84-转-GCJ02，解决高德坐标偏移" class="headerlink" title="WGS84 转 GCJ02，解决高德坐标偏移"></a>WGS84 转 GCJ02，解决高德坐标偏移</h2><p>用 Python 实现 GPS 偏移校正，WGS84 转 GCJ02（火星坐标系）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br></pre></td></tr></table></figure>

<h2 id="输出-JSON-文件"><a href="#输出-JSON-文件" class="headerlink" title="输出 JSON 文件"></a>输出 JSON 文件</h2><p>输出 JS 可以方便读取的 JSON 文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">jsonDir = os.path.abspath(<span class="string">'./jsons'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(jsonDir):</span><br><span class="line">    os.mkdir(jsonDir)</span><br><span class="line">jsonPath = os.path.join(jsonDir, gpxPath) + <span class="string">'.json'</span></span><br><span class="line"><span class="keyword">with</span> open(jsonPath, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<p>为了方便的处理多条数据，把上面 Python 的部分写成一个 procXml 函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    filePath = os.path.abspath(<span class="string">'./gpxs'</span>)</span><br><span class="line">    fileList = os.listdir(filePath)</span><br><span class="line">    <span class="keyword">for</span> gpxPath <span class="keyword">in</span> fileList:</span><br><span class="line">        print(<span class="string">'Processing '</span> + str(gpxPath))</span><br><span class="line">        procXml(filePath, gpxPath)</span><br><span class="line">        print(<span class="string">'Coresponding JSON file was generated.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="对位置数据进行可视化展示"><a href="#对位置数据进行可视化展示" class="headerlink" title="对位置数据进行可视化展示"></a>对位置数据进行可视化展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1.0, user-scalable=no, width=device-width"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>跑步轨迹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cache.amap.com/lbs/static/main1119.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myPageTop"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入关键字：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"tipinput"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/loca?v=1.3.2&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./line.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cache.amap.com/lbs/static/addToolbar.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span>		</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'amap://styles/1de318cbb8d12c02303a22c550b9ccc9'</span>,</span></span><br><span class="line">            zoom: 11,</span><br><span class="line"><span class="actionscript">            center: [<span class="number">120.168109</span>,<span class="number">35.943654</span>], <span class="comment">// 青岛</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// zoom: 15,</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// center: [121.37553692,28.3687836300], // 温岭</span></span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'dark'</span>,</span></span><br><span class="line"><span class="actionscript">            features: [<span class="string">'bg'</span>,<span class="string">'point'</span>],</span></span><br><span class="line"><span class="actionscript">            resizeEnable: <span class="literal">true</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//输入提示</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> autoOptions = &#123;</span></span><br><span class="line"><span class="actionscript">            input: <span class="string">"tipinput"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="actionscript">        AMap.plugin([<span class="string">'AMap.Autocomplete'</span>,<span class="string">'AMap.PlaceSearch'</span>,<span class="string">'AMap.MapType'</span>],<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> auto = <span class="keyword">new</span> AMap.Autocomplete(autoOptions);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> placeSearch = <span class="keyword">new</span> AMap.PlaceSearch(&#123;</span></span><br><span class="line">                map: map</span><br><span class="line"><span class="actionscript">            &#125;);  <span class="comment">//构造地点查询类</span></span></span><br><span class="line"><span class="actionscript">            AMap.event.addListener(auto, <span class="string">"select"</span>, select);<span class="comment">//注册监听，当选中某条记录时会触发</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">                placeSearch.setCity(e.poi.adcode);</span><br><span class="line"><span class="actionscript">                placeSearch.search(e.poi.name);  <span class="comment">//关键字查询查询</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            map.addControl(<span class="keyword">new</span> AMap.MapType());</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> Loca.LineLayer(&#123;</span></span><br><span class="line">            map: map</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setData(lines, &#123;</span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'lnglat'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> colors = [<span class="string">'#07E8E4'</span>,<span class="string">'#1f78b4'</span>,<span class="string">'#b2df8a'</span>,<span class="string">'#33a02c'</span>,<span class="string">'#fb9a99'</span>,<span class="string">'#e31a1c'</span>,<span class="string">'#fdbf6f'</span>,<span class="string">'#ff7f00'</span>,<span class="string">'#D1E87D'</span>,<span class="string">'#AD92D1'</span>];</span></span><br><span class="line">        layer.setData(lines, &#123;</span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'lnglat'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setOptions(&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line">                borderWidth: 3,</span><br><span class="line">                opacity: 1,</span><br><span class="line"><span class="actionscript">                color: <span class="function"><span class="keyword">function</span><span class="params">(v)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> id = v.value.line_id;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> len = colors.length;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> colors[id % len];</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 渲染</span></span></span><br><span class="line">        layer.render();</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考: <a href="https://lbs.amap.com/api/loca-api/demos/line/bj_busline_colors" target="_blank" rel="noopener">高德地图 API 分类路径示例</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://cyh42.github.io/Blog-Back-Up/map/run">跑步轨迹</a></p>
<p><img src="/article/run-track/Qingdao.jpg" alt></p>
<p><img src="/article/run-track/Wenling.jpg" alt></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 和高德地图 API 绘制我的足迹</title>
    <url>/article/track/</url>
    <content><![CDATA[<p>最近3年多去了不少城市，拍了不少照片，因此萌生了写个程序提取照片位置信息，转换为轨迹点画在一张地图上的想法。</p>
<a id="more"></a>

<h2 id="导出-GPX-文件"><a href="#导出-GPX-文件" class="headerlink" title="导出 GPX 文件"></a>导出 GPX 文件</h2><p>使用 GeoSetter 软件批量提取并导出图像 GPS 信息，保存为 GPX 文件，下面是一段 .gpx 文件的记录点格式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trkpt</span> <span class="attr">lat</span>=<span class="string">"35.94073611"</span> <span class="attr">lon</span>=<span class="string">"120.17107500"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span>2017-10-19T20:40:31Z<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ele</span>&gt;</span>11.170000<span class="tag">&lt;/<span class="name">ele</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">speed</span>&gt;</span>0.000000<span class="tag">&lt;/<span class="name">speed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span>293.078156<span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trkpt</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="读取-GPX-文件数据"><a href="#读取-GPX-文件数据" class="headerlink" title="读取 GPX 文件数据"></a>读取 GPX 文件数据</h2><p>直接使用 Python 自带的 xml 库完成读取 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdom</span><br><span class="line"></span><br><span class="line">dom_tree = xdom.parse(os.path.join(filePath, gpxPath))</span><br><span class="line">collection = dom_tree.documentElement</span><br><span class="line">trkpts = collection.getElementsByTagName(<span class="string">"trkpt"</span>)</span><br><span class="line">data = <span class="string">""</span></span><br><span class="line">rets = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> trkpt <span class="keyword">in</span> trkpts:</span><br><span class="line">    lat = trkpt.getAttribute(<span class="string">"lat"</span>)</span><br><span class="line">    lon = trkpt.getAttribute(<span class="string">"lon"</span>)</span><br><span class="line">    <span class="keyword">if</span> lat == <span class="string">'0'</span> <span class="keyword">or</span> lon == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    ret = wgs84_to_gcj02(float(lon), float(lat))</span><br><span class="line">    rets.append(ret)</span><br><span class="line">    data = data + <span class="string">"&#123; 'center': '"</span> + str(ret[<span class="number">0</span>]) + <span class="string">","</span> + str(ret[<span class="number">1</span>]) + <span class="string">"' &#125;,\n"</span></span><br></pre></td></tr></table></figure>

<h2 id="WGS84-转-GCJ02，解决高德坐标偏移"><a href="#WGS84-转-GCJ02，解决高德坐标偏移" class="headerlink" title="WGS84 转 GCJ02，解决高德坐标偏移"></a>WGS84 转 GCJ02，解决高德坐标偏移</h2><p>做过地图相关开发的同学肯定会遇到这样一个问题：同样的经纬度坐标，在谷歌地图和高德地图上的位置是不一样的。</p>
<h3 id="常用地图坐标系介绍"><a href="#常用地图坐标系介绍" class="headerlink" title="常用地图坐标系介绍"></a>常用地图坐标系介绍</h3><ul>
<li>WGS-84：是使用最广泛的坐标系，也是世界通用的坐标系，GPS 设备得到的经纬度就是在 WGS84 坐标系下的经纬度。通常底层接口（ HTML5 Geolocation 或 iOS、安卓 API ）得到的定位信息都是 WGS84 坐标系。</li>
<li>GCJ-02：又被称为火星坐标系，中国坐标偏移标准，高德地图、腾讯地图以及 Google 中国区地图使用。</li>
<li>BD-09 ：百度坐标偏移标准，百度地图使用。</li>
</ul>
<h3 id="Python-实现-GPS-偏移校正-WGS-84-到-GCJ-02"><a href="#Python-实现-GPS-偏移校正-WGS-84-到-GCJ-02" class="headerlink" title="Python 实现 GPS 偏移校正 ( WGS-84 ) 到 ( GCJ-02 )"></a>Python 实现 GPS 偏移校正 ( WGS-84 ) 到 ( GCJ-02 )</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br></pre></td></tr></table></figure>

<h2 id="输出-JS-文件"><a href="#输出-JS-文件" class="headerlink" title="输出 JS 文件"></a>输出 JS 文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">jsDir = os.path.abspath(<span class="string">'./js'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(jsDir):</span><br><span class="line">    os.mkdir(jsDir)</span><br><span class="line">jsonPath = os.path.join(jsDir, gpxPath) + <span class="string">'.js'</span></span><br><span class="line"><span class="keyword">with</span> open(jsonPath, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<p>为了方便的处理多条数据，把上面 Python 的部分写成一个 procXml 函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    filePath = os.path.abspath(<span class="string">'./gpxs'</span>)</span><br><span class="line">    fileList = os.listdir(filePath)</span><br><span class="line">    <span class="keyword">for</span> gpxPath <span class="keyword">in</span> fileList:</span><br><span class="line">        print(<span class="string">'Processing '</span> + str(gpxPath))</span><br><span class="line">        procXml(filePath, gpxPath)</span><br><span class="line">        print(<span class="string">'Coresponding JS file was generated.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="对位置数据进行可视化展示"><a href="#对位置数据进行可视化展示" class="headerlink" title="对位置数据进行可视化展示"></a>对位置数据进行可视化展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的足迹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cache.amap.com/lbs/static/main1119.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myPageTop"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入关键字：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"tipinput"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/loca?v=1.3.2&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./data.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cache.amap.com/lbs/static/addToolbar.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'amap://styles/1de318cbb8d12c02303a22c550b9ccc9'</span>,</span></span><br><span class="line">            zoom: 5,</span><br><span class="line">            center: [112.12255, 35.2044],</span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'dark'</span>,</span></span><br><span class="line"><span class="actionscript">            features: [<span class="string">'bg'</span>, <span class="string">'road'</span>, <span class="string">'point'</span>],</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> Loca.PointLayer(&#123;</span></span><br><span class="line">            map: map</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setData(districts, &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 指定经纬度所在字段</span></span></span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'center'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setOptions(&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 圆形半径，单位像素</span></span></span><br><span class="line">                radius: 2.5,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 填充颜色</span></span></span><br><span class="line"><span class="actionscript">                color: <span class="string">'#14B4C9'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 描边颜色</span></span></span><br><span class="line"><span class="actionscript">                borderColor: <span class="string">'#14B4C9'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 描边宽度，单位像素</span></span></span><br><span class="line">                borderWidth: 1,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 透明度 [0-1]</span></span></span><br><span class="line">                opacity: 0.9,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.render();</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//输入提示</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> autoOptions = &#123;</span></span><br><span class="line"><span class="actionscript">            input: <span class="string">"tipinput"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        AMap.plugin([<span class="string">'AMap.Autocomplete'</span>,<span class="string">'AMap.PlaceSearch'</span>,<span class="string">'AMap.MapType'</span>],<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> auto = <span class="keyword">new</span> AMap.Autocomplete(autoOptions);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> placeSearch = <span class="keyword">new</span> AMap.PlaceSearch(&#123;</span></span><br><span class="line">                map: map</span><br><span class="line"><span class="actionscript">            &#125;);  <span class="comment">//构造地点查询类</span></span></span><br><span class="line"><span class="actionscript">            AMap.event.addListener(auto, <span class="string">"select"</span>, select);<span class="comment">//注册监听，当选中某条记录时会触发</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">                placeSearch.setCity(e.poi.adcode);</span><br><span class="line"><span class="actionscript">                placeSearch.search(e.poi.name);  <span class="comment">//关键字查询查询</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            map.addControl(<span class="keyword">new</span> AMap.MapType());</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考: <a href="https://lbs.amap.com/api/loca-api/demos/scatter/scatter_citys" target="_blank" rel="noopener">高德地图 API 散点示例</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://cyh42.github.io/Blog-Back-Up/map/track">我的足迹</a></p>
<p><img src="/article/track/CHN.jpg" alt></p>
<p><img src="/article/track/TAO.jpg" alt></p>
<p><img src="/article/track/UPC.jpg" alt></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>保研经验分享：如果当时选择了放弃，我可能会后悔一辈子</title>
    <url>/article/tm/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码" />
    <label for="pass">请输入密码</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>保研</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/article/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
