<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记录我去过的和想去的地方</title>
    <url>/article/footprint/</url>
    <content><![CDATA[<p>旅行列表&amp;心愿名单</p>
<a id="more"></a>

<h2 id="旅行列表"><a href="#旅行列表" class="headerlink" title="旅行列表"></a>旅行列表</h2><table>
<thead>
<tr>
<th>日期</th>
<th>省份</th>
<th>城市\地区（景点）</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>2010/8/8-10</td>
<td>上海市</td>
<td>世博会</td>
<td></td>
</tr>
<tr>
<td>2010年8月中旬</td>
<td>浙江省</td>
<td>杭州（西湖）、绍兴（鲁迅故里）</td>
<td></td>
</tr>
<tr>
<td>2015/7/21-24</td>
<td>福建省</td>
<td>厦门（厦门大学、嘉庚公园、鼓浪屿、曾厝垵）</td>
<td></td>
</tr>
<tr>
<td>2016/7/5-6</td>
<td>浙江省</td>
<td>西塘</td>
<td></td>
</tr>
<tr>
<td>2016/7/7</td>
<td>浙江省</td>
<td>乌镇</td>
<td></td>
</tr>
<tr>
<td>2016/7/8-9</td>
<td>上海市</td>
<td>城隍庙、东方明珠、外滩、同济、复旦、上交</td>
<td></td>
</tr>
<tr>
<td>2016/9/2<br>2017/7/6</td>
<td>江苏省</td>
<td>南京（鼓楼、中山陵、夫子庙、南大、东南）</td>
<td></td>
</tr>
<tr>
<td>2018/7/10-18</td>
<td>山东省</td>
<td>东营（石油大学）</td>
<td>实习</td>
</tr>
<tr>
<td>2018/7/23-28</td>
<td>河南省</td>
<td>洛阳（一拖、丽景门、龙门石窟）、巩义市</td>
<td>实习</td>
</tr>
<tr>
<td>2019/6/30-7/4</td>
<td>湖北省</td>
<td>武汉（华科、黄鹤楼、长江大桥、龟山）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/5-7</td>
<td>陕西省</td>
<td>西安（西交、钟楼、鼓楼、大明宫）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/8-10</td>
<td>天津市</td>
<td>天津大学、天津之眼、天塔</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/10-14<br>2019/7/20-31</td>
<td>河北省</td>
<td>唐山市曹妃甸区</td>
<td>实习</td>
</tr>
<tr>
<td>2019/7/15-19</td>
<td>安徽省</td>
<td>合肥（中科大）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/8/1</td>
<td>山东省</td>
<td>济南（芙蓉街、大明湖）</td>
<td>换乘</td>
</tr>
<tr>
<td>2019/9/15</td>
<td>北京市</td>
<td>清华、北大、南锣鼓巷、天坛、永定门</td>
<td>预推免</td>
</tr>
<tr>
<td>2019/9/26-28</td>
<td>浙江省</td>
<td>杭州（浙大玉泉校区、西湖、城市阳台）</td>
<td>预推免</td>
</tr>
<tr>
<td>2019/9/28</td>
<td>浙江省</td>
<td>宁波（老外滩、江北天主教堂、解放桥）</td>
<td>转飞机</td>
</tr>
</tbody></table>
<h2 id="心愿名单"><a href="#心愿名单" class="headerlink" title="心愿名单"></a>心愿名单</h2><table>
<thead>
<tr>
<th>目的地</th>
<th>内容</th>
<th>计划时间</th>
</tr>
</thead>
<tbody><tr>
<td>山东泰安</td>
<td>泰山</td>
<td>2020年上半年</td>
</tr>
<tr>
<td>湖南长沙</td>
<td>岳麓山、湖南大学、橘子洲头、茶颜悦色</td>
<td></td>
</tr>
<tr>
<td>成都、重庆</td>
<td>火锅、串串</td>
<td></td>
</tr>
<tr>
<td>香港</td>
<td></td>
<td>2021-2023</td>
</tr>
<tr>
<td>澳门</td>
<td>威尼斯人、官也街、大三巴牌坊</td>
<td>2021-2023</td>
</tr>
<tr>
<td>日本</td>
<td>东京、北海道、富士山</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 和高德 API 绘制跑步轨迹</title>
    <url>/article/run-track/</url>
    <content><![CDATA[<p>把2019年在不同地方跑步的轨迹都画在一张地图上，看看过去一年都跑过哪些地方。</p>
<a id="more"></a>

<h2 id="导出-GPX-文件"><a href="#导出-GPX-文件" class="headerlink" title="导出 GPX 文件"></a>导出 GPX 文件</h2><p>第一步，先把各个地方能导出轨迹的都导出来。看了一下 .FIT 、 .TPX 和 .GPX 中，以 GPX 文件结构最简单，于是把轨迹都导成 .gpx 格式文件。</p>
<h2 id="读取-GPX-文件数据"><a href="#读取-GPX-文件数据" class="headerlink" title="读取 GPX 文件数据"></a>读取 GPX 文件数据</h2><p>第二步，用 Python 读入这些 GPX 轨迹信息，处理后再画在地图上，直接使用 Python 自带的 xml 库完成读取，注意要剔除 lat 和 lon 为0的数据点，因为 GPX 是用这种方法来标记暂停的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdom</span><br><span class="line"></span><br><span class="line">gpxPath = <span class="string">'test.gpx'</span></span><br><span class="line">dom_tree = xdom.parse(gpxPath)</span><br><span class="line">collection = dom_tree.documentElement</span><br><span class="line">trkpts = collection.getElementsByTagName(<span class="string">"trkpt"</span>)</span><br><span class="line">data = <span class="string">'&#123;"line_id":"'</span> + gpxPath[<span class="number">31</span>:<span class="number">39</span>] + <span class="string">'","lnglat":['</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> trkpt <span class="keyword">in</span> trkpts:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    lat = trkpt.getAttribute(<span class="string">"lat"</span>)</span><br><span class="line">    lon = trkpt.getAttribute(<span class="string">"lon"</span>)</span><br><span class="line">    <span class="keyword">if</span> lat == <span class="string">'0'</span> <span class="keyword">or</span> lon == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    ret = wgs84_to_gcj02(float(lon), float(lat))</span><br><span class="line">    data = data + <span class="string">'['</span> + str(ret[<span class="number">0</span>]) + <span class="string">','</span> + str(ret[<span class="number">1</span>]) + <span class="string">']'</span></span><br><span class="line">    <span class="keyword">if</span>(i &lt; len(trkpts)):</span><br><span class="line">        data = data + <span class="string">','</span></span><br><span class="line">data = data + <span class="string">']&#125;,'</span></span><br></pre></td></tr></table></figure>

<h2 id="WGS84-转-GCJ02，解决高德坐标偏移"><a href="#WGS84-转-GCJ02，解决高德坐标偏移" class="headerlink" title="WGS84 转 GCJ02，解决高德坐标偏移"></a>WGS84 转 GCJ02，解决高德坐标偏移</h2><p>用 Python 实现 GPS 偏移校正，WGS84 转 GCJ02（火星坐标系）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br></pre></td></tr></table></figure>

<h2 id="输出-JSON-文件"><a href="#输出-JSON-文件" class="headerlink" title="输出 JSON 文件"></a>输出 JSON 文件</h2><p>输出 JS 可以方便读取的 JSON 文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">fileDir, fileName = os.path.split(gpxPath)</span><br><span class="line">jsonDir = os.path.join(fileDir, <span class="string">'jsons'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(jsonDir):</span><br><span class="line">    os.mkdir(jsonDir)</span><br><span class="line"></span><br><span class="line">jsonPath = os.path.join(jsonDir, gpxPath) + <span class="string">'.json'</span></span><br><span class="line"><span class="keyword">with</span> open(jsonPath, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br></pre></td></tr></table></figure>

<p>为了方便的处理多条数据，把上面 Python 的部分写成一个 procXml 函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    filePath = <span class="string">'存放 .gpx 格式文件的文件夹的路径'</span></span><br><span class="line">    fileList = os.listdir(filePath)</span><br><span class="line">    <span class="keyword">for</span> gpxPath <span class="keyword">in</span> fileList:</span><br><span class="line">        print(<span class="string">'Processing'</span>+str(gpxPath))</span><br><span class="line">        procXml(<span class="string">'filePath'</span> + gpxPath)</span><br><span class="line">        print(<span class="string">'Coresponding JSON file was generated.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="对位置数据进行可视化展示"><a href="#对位置数据进行可视化展示" class="headerlink" title="对位置数据进行可视化展示"></a>对位置数据进行可视化展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>跑步轨迹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        html,</span><br><span class="line">        body,</span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> &#123;</span></span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/loca?v=1.3.2&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"line.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span>		</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'amap://styles/1de318cbb8d12c02303a22c550b9ccc9'</span>,</span></span><br><span class="line">            zoom: 11,</span><br><span class="line"><span class="actionscript">            center: [<span class="number">120.168109</span>,<span class="number">35.943654</span>], <span class="comment">// 青岛</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// zoom: 15,</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// center: [121.37553692,28.3687836300], // 温岭</span></span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'dark'</span>,</span></span><br><span class="line"><span class="actionscript">			features: [<span class="string">'bg'</span>,<span class="string">'point'</span>],</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// Loca 自 1.2.0 起 viewMode 模式默认为 3D，如需 2D 模式，请显示配置。</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// viewMode: '3D'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> Loca.LineLayer(&#123;</span></span><br><span class="line">            map: map</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setData(lines, &#123;</span><br><span class="line"><span class="actionscript">			lnglat: <span class="string">'lnglat'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> colors = [<span class="string">'#07E8E4'</span>,<span class="string">'#1f78b4'</span>,<span class="string">'#b2df8a'</span>,<span class="string">'#33a02c'</span>,<span class="string">'#fb9a99'</span>,<span class="string">'#e31a1c'</span>,<span class="string">'#fdbf6f'</span>,<span class="string">'#ff7f00'</span>,<span class="string">'#D1E87D'</span>,<span class="string">'#AD92D1'</span>,<span class="string">'#3346BD'</span>,<span class="string">'#EBEB8D'</span>,<span class="string">'#7FC97F'</span>];</span></span><br><span class="line">        layer.setData(lines, &#123;</span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'lnglat'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setOptions(&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line">                borderWidth: 3,</span><br><span class="line">                opacity: 1,</span><br><span class="line"><span class="actionscript">                color: <span class="function"><span class="keyword">function</span><span class="params">(v)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> id = v.value.line_id;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> len = colors.length;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> colors[id % len];</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 渲染</span></span></span><br><span class="line">        layer.render();</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考: <a href="https://lbs.amap.com/api/loca-api/demos/line/bj_busline_colors" target="_blank" rel="noopener">高德地图 API 分类路径示例</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://cyh42.github.io/Blog-Back-Up/map/run.html">跑步轨迹</a></p>
<p><img src="/article/run-track/Qingdao.jpg" alt></p>
<p><img src="/article/run-track/Wenling.jpg" alt></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 和高德地图 API 绘制我的足迹</title>
    <url>/article/track/</url>
    <content><![CDATA[<p>最近3年多去了不少城市，拍了不少照片，因此萌生了写个程序提取照片位置信息，转换为轨迹点画在一张地图上的想法。</p>
<a id="more"></a>

<h2 id="导出-GPX-文件"><a href="#导出-GPX-文件" class="headerlink" title="导出 GPX 文件"></a>导出 GPX 文件</h2><p>使用 GeoSetter 软件批量提取并导出图像 GPS 信息，保存为 GPX 文件，下面是一段 .gpx 文件的记录点格式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trkpt</span> <span class="attr">lat</span>=<span class="string">"35.94073611"</span> <span class="attr">lon</span>=<span class="string">"120.17107500"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span>2017-10-19T20:40:31Z<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ele</span>&gt;</span>11.170000<span class="tag">&lt;/<span class="name">ele</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">speed</span>&gt;</span>0.000000<span class="tag">&lt;/<span class="name">speed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span>293.078156<span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trkpt</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="读取-GPX-文件数据"><a href="#读取-GPX-文件数据" class="headerlink" title="读取 GPX 文件数据"></a>读取 GPX 文件数据</h2><p>直接使用 Python 自带的 xml 库完成读取 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdom</span><br><span class="line"></span><br><span class="line">gpxPath = <span class="string">'test.gpx'</span></span><br><span class="line">dom_tree = xdom.parse(gpxPath)</span><br><span class="line">collection = dom_tree.documentElement</span><br><span class="line">trkpts = collection.getElementsByTagName(<span class="string">"trkpt"</span>)</span><br><span class="line">data = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> trkpt <span class="keyword">in</span> trkpts:</span><br><span class="line">    lat = trkpt.getAttribute(<span class="string">"lat"</span>)</span><br><span class="line">    lon = trkpt.getAttribute(<span class="string">"lon"</span>)</span><br><span class="line">    <span class="keyword">if</span> lat==<span class="string">'0'</span> <span class="keyword">or</span> lon==<span class="string">'0'</span>:</span><br><span class="line">    	<span class="keyword">continue</span></span><br><span class="line">    ret = wgs84_to_gcj02(float(lon), float(lat))</span><br><span class="line">    data = data + <span class="string">"&#123; 'center': '"</span> + str(ret[<span class="number">0</span>]) + <span class="string">","</span> + str(ret[<span class="number">1</span>]) + <span class="string">"' &#125;,\n"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(gpxPath + <span class="string">'.js'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<h2 id="WGS84-转-GCJ02，解决高德坐标偏移"><a href="#WGS84-转-GCJ02，解决高德坐标偏移" class="headerlink" title="WGS84 转 GCJ02，解决高德坐标偏移"></a>WGS84 转 GCJ02，解决高德坐标偏移</h2><p>做过地图相关开发的同学肯定会遇到这样一个问题：同样的经纬度坐标，在谷歌地图和高德地图上的位置是不一样的。</p>
<h3 id="常用地图坐标系介绍"><a href="#常用地图坐标系介绍" class="headerlink" title="常用地图坐标系介绍"></a>常用地图坐标系介绍</h3><ul>
<li>WGS-84：是使用最广泛的坐标系，也是世界通用的坐标系，GPS 设备得到的经纬度就是在 WGS84 坐标系下的经纬度。通常底层接口（ HTML5 Geolocation 或 iOS、安卓 API ）得到的定位信息都是 WGS84 坐标系。</li>
<li>GCJ-02：又被称为火星坐标系，中国坐标偏移标准，高德地图、腾讯地图以及 Google 中国区地图使用。</li>
<li>BD-09 ：百度坐标偏移标准，百度地图使用。</li>
</ul>
<h3 id="Python-实现-GPS-偏移校正-WGS-84-到-GCJ-02"><a href="#Python-实现-GPS-偏移校正-WGS-84-到-GCJ-02" class="headerlink" title="Python 实现 GPS 偏移校正 ( WGS-84 ) 到 ( GCJ-02 )"></a>Python 实现 GPS 偏移校正 ( WGS-84 ) 到 ( GCJ-02 )</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br></pre></td></tr></table></figure>

<h2 id="对位置数据进行可视化展示"><a href="#对位置数据进行可视化展示" class="headerlink" title="对位置数据进行可视化展示"></a>对位置数据进行可视化展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的足迹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        html,</span><br><span class="line">        body,</span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> &#123;</span></span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/loca?v=1.3.2&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./data.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'amap://styles/1de318cbb8d12c02303a22c550b9ccc9'</span>,</span></span><br><span class="line">            zoom: 5,</span><br><span class="line">            center: [112.12255, 35.2044],</span><br><span class="line"><span class="actionscript">			mapStyle: <span class="string">'dark'</span>,</span></span><br><span class="line"><span class="actionscript">			features: [<span class="string">'bg'</span>, <span class="string">'road'</span>, <span class="string">'point'</span>],</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// Loca 自 1.2.0 起 viewMode 模式默认为 3D，如需 2D 模式，请显示配置。</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// viewMode: '3D'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> Loca.PointLayer(&#123;</span></span><br><span class="line">            map: map</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setData(districts, &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 指定经纬度所在字段</span></span></span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'center'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setOptions(&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 圆形半径，单位像素</span></span></span><br><span class="line">                radius: 2.5,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 填充颜色</span></span></span><br><span class="line"><span class="actionscript">                color: <span class="string">'#14B4C9'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 描边颜色</span></span></span><br><span class="line"><span class="actionscript">                borderColor: <span class="string">'#14B4C9'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 描边宽度，单位像素</span></span></span><br><span class="line">                borderWidth: 1,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 透明度 [0-1]</span></span></span><br><span class="line">                opacity: 0.9,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.render();</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考: <a href="https://lbs.amap.com/api/loca-api/demos/scatter/scatter_citys" target="_blank" rel="noopener">高德地图 API 散点示例</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://cyh42.github.io/Blog-Back-Up/map/track.html">我的足迹</a></p>
<p><img src="/article/track/CHN.jpg" alt></p>
<p><img src="/article/track/TAO.jpg" alt></p>
<p><img src="/article/track/UPC.jpg" alt></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>保研经验分享：如果当时选择了放弃，我可能会后悔一辈子</title>
    <url>/article/tm/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码" />
    <label for="pass">请输入密码</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>保研</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/article/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
