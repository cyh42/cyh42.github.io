<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>看看跑过哪些地方，用 Python 和高德 API 绘制跑步轨迹</title>
    <url>/article/run-track/</url>
    <content><![CDATA[<p>把2019年在不同地方跑步的轨迹都画在一张地图上，看看过去一年都跑过哪些地方。</p>
<a id="more"></a>

<h2 id="导出-GPX-文件"><a href="#导出-GPX-文件" class="headerlink" title="导出 GPX 文件"></a>导出 GPX 文件</h2><p>第一步，先把各个地方能导出轨迹的都导出来。看了一下 .FIT 、 .TPX 和 .GPX 中，以 GPX 文件结构最简单，于是把轨迹都导成 .gpx 格式文件。</p>
<h2 id="读取-GPX-文件数据"><a href="#读取-GPX-文件数据" class="headerlink" title="读取 GPX 文件数据"></a>读取 GPX 文件数据</h2><p>第二步，用 Python 读入这些 GPX 轨迹信息，处理后再画在地图上，直接使用 Python 自带的 xml 库完成读取，注意要剔除 lat 和 lon 为0的数据点，因为 GPX 是用这种方法来标记暂停的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdom</span><br><span class="line"></span><br><span class="line">gpxPath = <span class="string">'test.gpx'</span></span><br><span class="line">dom_tree = xdom.parse(gpxPath)</span><br><span class="line">collection = dom_tree.documentElement</span><br><span class="line">trkpts = collection.getElementsByTagName(<span class="string">"trkpt"</span>)</span><br><span class="line">data = <span class="string">'&#123;"line_id":"'</span> + gpxPath[<span class="number">31</span>:<span class="number">39</span>] + <span class="string">'","lnglat":['</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> trkpt <span class="keyword">in</span> trkpts:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    lat = trkpt.getAttribute(<span class="string">"lat"</span>)</span><br><span class="line">    lon = trkpt.getAttribute(<span class="string">"lon"</span>)</span><br><span class="line">    <span class="keyword">if</span> lat == <span class="string">'0'</span> <span class="keyword">or</span> lon == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    ret = wgs84_to_gcj02(float(lon), float(lat))</span><br><span class="line">    data = data + <span class="string">'['</span> + str(ret[<span class="number">0</span>]) + <span class="string">','</span> + str(ret[<span class="number">1</span>]) + <span class="string">']'</span></span><br><span class="line">    <span class="keyword">if</span>(i &lt; len(trkpts)):</span><br><span class="line">        data = data + <span class="string">','</span></span><br><span class="line">data = data + <span class="string">']&#125;,'</span></span><br></pre></td></tr></table></figure>

<h2 id="WGS84-转-GCJ02，解决高德坐标偏移"><a href="#WGS84-转-GCJ02，解决高德坐标偏移" class="headerlink" title="WGS84 转 GCJ02，解决高德坐标偏移"></a>WGS84 转 GCJ02，解决高德坐标偏移</h2><p>用 Python 实现 GPS 偏移校正，WGS84 转 GCJ02（火星坐标系）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br></pre></td></tr></table></figure>

<h2 id="输出-JSON-文件"><a href="#输出-JSON-文件" class="headerlink" title="输出 JSON 文件"></a>输出 JSON 文件</h2><p>输出 JS 可以方便读取的 JSON 文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">fileDir, fileName = os.path.split(gpxPath)</span><br><span class="line">jsonDir = os.path.join(fileDir, <span class="string">'jsons'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(jsonDir):</span><br><span class="line">    os.mkdir(jsonDir)</span><br><span class="line"></span><br><span class="line">jsonPath = os.path.join(jsonDir, gpxPath) + <span class="string">'.json'</span></span><br><span class="line"><span class="keyword">with</span> open(jsonPath, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br></pre></td></tr></table></figure>

<p>为了方便的处理多条数据，把上面 Python 的部分写成一个 procXml 函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    filePath = <span class="string">'存放 .gpx 格式文件的文件夹的路径'</span></span><br><span class="line">    fileList = os.listdir(filePath)</span><br><span class="line">    <span class="keyword">for</span> gpxPath <span class="keyword">in</span> fileList:</span><br><span class="line">        print(<span class="string">'Processing'</span>+str(gpxPath))</span><br><span class="line">        procXml(<span class="string">'filePath'</span> + gpxPath)</span><br><span class="line">        print(<span class="string">'Coresponding JSON file was generated.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="对位置数据进行可视化展示"><a href="#对位置数据进行可视化展示" class="headerlink" title="对位置数据进行可视化展示"></a>对位置数据进行可视化展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>跑步轨迹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        html,</span><br><span class="line">        body,</span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> &#123;</span></span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/loca?v=1.3.2&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"line.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span>		</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'amap://styles/1de318cbb8d12c02303a22c550b9ccc9'</span>,</span></span><br><span class="line">            zoom: 11,</span><br><span class="line"><span class="actionscript">            center: [<span class="number">120.168109</span>,<span class="number">35.943654</span>], <span class="comment">// 青岛</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// zoom: 15,</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// center: [121.37553692,28.3687836300], // 温岭</span></span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'dark'</span>,</span></span><br><span class="line"><span class="actionscript">			features: [<span class="string">'bg'</span>,<span class="string">'point'</span>],</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// Loca 自 1.2.0 起 viewMode 模式默认为 3D，如需 2D 模式，请显示配置。</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// viewMode: '3D'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> Loca.LineLayer(&#123;</span></span><br><span class="line">            map: map</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setData(lines, &#123;</span><br><span class="line"><span class="actionscript">			lnglat: <span class="string">'lnglat'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> colors = [<span class="string">'#07E8E4'</span>,<span class="string">'#1f78b4'</span>,<span class="string">'#b2df8a'</span>,<span class="string">'#33a02c'</span>,<span class="string">'#fb9a99'</span>,<span class="string">'#e31a1c'</span>,<span class="string">'#fdbf6f'</span>,<span class="string">'#ff7f00'</span>,<span class="string">'#D1E87D'</span>,<span class="string">'#AD92D1'</span>,<span class="string">'#3346BD'</span>,<span class="string">'#EBEB8D'</span>,<span class="string">'#7FC97F'</span>];</span></span><br><span class="line">        layer.setData(lines, &#123;</span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'lnglat'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setOptions(&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line">                borderWidth: 3,</span><br><span class="line">                opacity: 1,</span><br><span class="line"><span class="actionscript">                color: <span class="function"><span class="keyword">function</span><span class="params">(v)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> id = v.value.line_id;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> len = colors.length;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> colors[id % len];</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 渲染</span></span></span><br><span class="line">        layer.render();</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考: <a href="https://lbs.amap.com/api/loca-api/demos/line/bj_busline_colors" target="_blank" rel="noopener">高德地图 API 分类路径示例</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://cyh42.github.io/Blog-Back-Up/map/run.html">跑步轨迹</a></p>
<p><img src="/article/run-track/Qingdao.jpg" alt></p>
<p><img src="/article/run-track/Wenling.jpg" alt></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>看看去过哪些地方，用 Python 和高德地图 API 绘制散点</title>
    <url>/article/track/</url>
    <content><![CDATA[<p>最近3年多去了不少城市，拍了不少照片，因此萌生了写个程序提取照片位置信息，转换为轨迹点画在一张地图上的想法。</p>
<a id="more"></a>

<h2 id="导出-GPX-文件"><a href="#导出-GPX-文件" class="headerlink" title="导出 GPX 文件"></a>导出 GPX 文件</h2><p>使用 GeoSetter 软件批量提取并导出图像 GPS 信息，保存为 GPX 文件，下面是一段 .gpx 文件的记录点格式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trkpt</span> <span class="attr">lat</span>=<span class="string">"35.94073611"</span> <span class="attr">lon</span>=<span class="string">"120.17107500"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span>2017-10-19T20:40:31Z<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ele</span>&gt;</span>11.170000<span class="tag">&lt;/<span class="name">ele</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">speed</span>&gt;</span>0.000000<span class="tag">&lt;/<span class="name">speed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span>293.078156<span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trkpt</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="读取-GPX-文件数据"><a href="#读取-GPX-文件数据" class="headerlink" title="读取 GPX 文件数据"></a>读取 GPX 文件数据</h2><p>直接使用 Python 自带的 xml 库完成读取 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdom</span><br><span class="line"></span><br><span class="line">gpxPath = <span class="string">'test.gpx'</span></span><br><span class="line">dom_tree = xdom.parse(gpxPath)</span><br><span class="line">collection = dom_tree.documentElement</span><br><span class="line">trkpts = collection.getElementsByTagName(<span class="string">"trkpt"</span>)</span><br><span class="line">data = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> trkpt <span class="keyword">in</span> trkpts:</span><br><span class="line">    lat = trkpt.getAttribute(<span class="string">"lat"</span>)</span><br><span class="line">    lon = trkpt.getAttribute(<span class="string">"lon"</span>)</span><br><span class="line">    <span class="keyword">if</span> lat==<span class="string">'0'</span> <span class="keyword">or</span> lon==<span class="string">'0'</span>:</span><br><span class="line">    	<span class="keyword">continue</span></span><br><span class="line">    ret = wgs84_to_gcj02(float(lon), float(lat))</span><br><span class="line">    data = data + <span class="string">"&#123; 'center': '"</span> + str(ret[<span class="number">0</span>]) + <span class="string">","</span> + str(ret[<span class="number">1</span>]) + <span class="string">"' &#125;,\n"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(gpxPath + <span class="string">'.js'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<h2 id="WGS84-转-GCJ02，解决高德坐标偏移"><a href="#WGS84-转-GCJ02，解决高德坐标偏移" class="headerlink" title="WGS84 转 GCJ02，解决高德坐标偏移"></a>WGS84 转 GCJ02，解决高德坐标偏移</h2><p>做过地图相关开发的同学肯定会遇到这样一个问题：同样的经纬度坐标，在谷歌地图和高德地图上的位置是不一样的。</p>
<h3 id="常用地图坐标系介绍"><a href="#常用地图坐标系介绍" class="headerlink" title="常用地图坐标系介绍"></a>常用地图坐标系介绍</h3><ul>
<li>WGS-84：是使用最广泛的坐标系，也是世界通用的坐标系，GPS 设备得到的经纬度就是在 WGS84 坐标系下的经纬度。通常底层接口（ HTML5 Geolocation 或 iOS、安卓 API ）得到的定位信息都是 WGS84 坐标系。</li>
<li>GCJ-02：又被称为火星坐标系，中国坐标偏移标准，高德地图、腾讯地图以及 Google 中国区地图使用。</li>
<li>BD-09 ：百度坐标偏移标准，百度地图使用。</li>
</ul>
<h3 id="Python-实现-GPS-偏移校正-WGS-84-到-GCJ-02"><a href="#Python-实现-GPS-偏移校正-WGS-84-到-GCJ-02" class="headerlink" title="Python 实现 GPS 偏移校正 ( WGS-84 ) 到 ( GCJ-02 )"></a>Python 实现 GPS 偏移校正 ( WGS-84 ) 到 ( GCJ-02 )</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br></pre></td></tr></table></figure>

<h2 id="对位置数据进行可视化展示"><a href="#对位置数据进行可视化展示" class="headerlink" title="对位置数据进行可视化展示"></a>对位置数据进行可视化展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的足迹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        html,</span><br><span class="line">        body,</span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> &#123;</span></span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/loca?v=1.3.2&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./data.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'amap://styles/1de318cbb8d12c02303a22c550b9ccc9'</span>,</span></span><br><span class="line">            zoom: 5,</span><br><span class="line">            center: [112.12255, 35.2044],</span><br><span class="line"><span class="actionscript">			mapStyle: <span class="string">'dark'</span>,</span></span><br><span class="line"><span class="actionscript">			features: [<span class="string">'bg'</span>, <span class="string">'road'</span>, <span class="string">'point'</span>],</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// Loca 自 1.2.0 起 viewMode 模式默认为 3D，如需 2D 模式，请显示配置。</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// viewMode: '3D'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> Loca.PointLayer(&#123;</span></span><br><span class="line">            map: map</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setData(districts, &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 指定经纬度所在字段</span></span></span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'center'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setOptions(&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 圆形半径，单位像素</span></span></span><br><span class="line">                radius: 2.5,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 填充颜色</span></span></span><br><span class="line"><span class="actionscript">                color: <span class="string">'#14B4C9'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 描边颜色</span></span></span><br><span class="line"><span class="actionscript">                borderColor: <span class="string">'#14B4C9'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 描边宽度，单位像素</span></span></span><br><span class="line">                borderWidth: 1,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 透明度 [0-1]</span></span></span><br><span class="line">                opacity: 0.9,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.render();</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考: <a href="https://lbs.amap.com/api/loca-api/demos/scatter/scatter_citys" target="_blank" rel="noopener">高德地图 API 散点示例</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://cyh42.github.io/Blog-Back-Up/map/track.html">我的足迹</a></p>
<p><img src="/article/track/CHN.jpg" alt></p>
<p><img src="/article/track/TAO.jpg" alt></p>
<p><img src="/article/track/UPC.jpg" alt></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>保研经验分享：如果当时选择了放弃，我可能会后悔一辈子</title>
    <url>/article/tm/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码" />
    <label for="pass">请输入密码</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>保研</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/article/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
