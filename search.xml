<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>看看跑过哪些地方，用 Python 和高德 API 绘制跑步轨迹</title>
    <url>/article/run-track/</url>
    <content><![CDATA[<p>把2019年在不同地方跑步的轨迹都画在一张地图上，看看过去一年都跑过哪些地方。</p>
<a id="more"></a>

<h2 id="导出-GPX-文件"><a href="#导出-GPX-文件" class="headerlink" title="导出 GPX 文件"></a>导出 GPX 文件</h2><p>第一步，先把各个地方能导出轨迹的都导出来。看了一下 .FIT 、 .TPX 和 .GPX 中，以 GPX 文件结构最简单，于是把轨迹都导成 .gpx 格式文件。</p>
<h2 id="读取-GPX-文件数据"><a href="#读取-GPX-文件数据" class="headerlink" title="读取 GPX 文件数据"></a>读取 GPX 文件数据</h2><p>第二步，用 Python 读入这些 GPX 轨迹信息，处理后再画在地图上，直接使用 Python 自带的 xml 库完成读取，注意要剔除 lat 和 lon 为0的数据点，因为 GPX 是用这种方法来标记暂停的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdom</span><br><span class="line"></span><br><span class="line">gpxPath = <span class="string">'test.gpx'</span></span><br><span class="line">dom_tree = xdom.parse(gpxPath)</span><br><span class="line">collection = dom_tree.documentElement</span><br><span class="line">trkpts = collection.getElementsByTagName(<span class="string">"trkpt"</span>)</span><br><span class="line">data = <span class="string">'&#123;"line_id":"'</span> + gpxPath[<span class="number">31</span>:<span class="number">39</span>] + <span class="string">'","lnglat":['</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> trkpt <span class="keyword">in</span> trkpts:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    lat = trkpt.getAttribute(<span class="string">"lat"</span>)</span><br><span class="line">    lon = trkpt.getAttribute(<span class="string">"lon"</span>)</span><br><span class="line">    <span class="keyword">if</span> lat == <span class="string">'0'</span> <span class="keyword">or</span> lon == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    ret = wgs84_to_gcj02(float(lon), float(lat))</span><br><span class="line">    data = data + <span class="string">'['</span> + str(ret[<span class="number">0</span>]) + <span class="string">','</span> + str(ret[<span class="number">1</span>]) + <span class="string">']'</span></span><br><span class="line">    <span class="keyword">if</span>(i &lt; len(trkpts)):</span><br><span class="line">        data = data + <span class="string">','</span></span><br><span class="line">data = data + <span class="string">']&#125;,'</span></span><br></pre></td></tr></table></figure>

<h2 id="WGS84-转-GCJ02，解决高德坐标偏移"><a href="#WGS84-转-GCJ02，解决高德坐标偏移" class="headerlink" title="WGS84 转 GCJ02，解决高德坐标偏移"></a>WGS84 转 GCJ02，解决高德坐标偏移</h2><p>用 Python 实现 GPS 偏移校正，WGS84 转 GCJ02（火星坐标系）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br></pre></td></tr></table></figure>

<h2 id="输出-JSON-文件"><a href="#输出-JSON-文件" class="headerlink" title="输出 JSON 文件"></a>输出 JSON 文件</h2><p>输出 JS 可以方便读取的 JSON 文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">fileDir, fileName = os.path.split(gpxPath)</span><br><span class="line">jsonDir = os.path.join(fileDir, <span class="string">'jsons'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(jsonDir):</span><br><span class="line">    os.mkdir(jsonDir)</span><br><span class="line"></span><br><span class="line">jsonPath = os.path.join(jsonDir, gpxPath) + <span class="string">'.json'</span></span><br><span class="line"><span class="keyword">with</span> open(jsonPath, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br></pre></td></tr></table></figure>

<p>为了方便的处理多条数据，把上面 Python 的部分写成一个 procXml 函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    filePath = <span class="string">'存放 .gpx 格式文件的文件夹的路径'</span></span><br><span class="line">    fileList = os.listdir(filePath)</span><br><span class="line">    <span class="keyword">for</span> gpxPath <span class="keyword">in</span> fileList:</span><br><span class="line">        print(<span class="string">'Processing'</span>+str(gpxPath))</span><br><span class="line">        procXml(<span class="string">'filePath'</span> + gpxPath)</span><br><span class="line">        print(<span class="string">'Coresponding JSON file was generated.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="对位置数据进行可视化展示"><a href="#对位置数据进行可视化展示" class="headerlink" title="对位置数据进行可视化展示"></a>对位置数据进行可视化展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>跑步轨迹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        html,</span><br><span class="line">        body,</span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> &#123;</span></span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/loca?v=1.3.2&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"line.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span>		</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'amap://styles/1de318cbb8d12c02303a22c550b9ccc9'</span>,</span></span><br><span class="line">            zoom: 11,</span><br><span class="line"><span class="actionscript">            center: [<span class="number">120.168109</span>,<span class="number">35.943654</span>], <span class="comment">// 青岛</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// zoom: 15,</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// center: [121.37553692,28.3687836300], // 温岭</span></span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'dark'</span>,</span></span><br><span class="line"><span class="actionscript">			features: [<span class="string">'bg'</span>,<span class="string">'point'</span>],</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// Loca 自 1.2.0 起 viewMode 模式默认为 3D，如需 2D 模式，请显示配置。</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// viewMode: '3D'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> Loca.LineLayer(&#123;</span></span><br><span class="line">            map: map</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setData(lines, &#123;</span><br><span class="line"><span class="actionscript">			lnglat: <span class="string">'lnglat'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> colors = [<span class="string">'#07E8E4'</span>,<span class="string">'#1f78b4'</span>,<span class="string">'#b2df8a'</span>,<span class="string">'#33a02c'</span>,<span class="string">'#fb9a99'</span>,<span class="string">'#e31a1c'</span>,<span class="string">'#fdbf6f'</span>,<span class="string">'#ff7f00'</span>,<span class="string">'#D1E87D'</span>,<span class="string">'#AD92D1'</span>,<span class="string">'#3346BD'</span>,<span class="string">'#EBEB8D'</span>,<span class="string">'#7FC97F'</span>];</span></span><br><span class="line">        layer.setData(lines, &#123;</span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'lnglat'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setOptions(&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line">                borderWidth: 3,</span><br><span class="line">                opacity: 1,</span><br><span class="line"><span class="actionscript">                color: <span class="function"><span class="keyword">function</span><span class="params">(v)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> id = v.value.line_id;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> len = colors.length;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> colors[id % len];</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 渲染</span></span></span><br><span class="line">        layer.render();</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考: <a href="https://lbs.amap.com/api/loca-api/demos/line/bj_busline_colors" target="_blank" rel="noopener">高德地图 API 分类路径示例</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://cyh42.github.io/Blog-Back-Up/map/run.html" target="_blank" rel="noopener">跑步轨迹</a></p>
<p><img src="/article/run-track/Qingdao.jpg" alt></p>
<p><img src="/article/run-track/Wenling.jpg" alt></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>看看去过哪些地方，用 Python 和高德地图 API 绘制散点</title>
    <url>/article/track/</url>
    <content><![CDATA[<p>最近3年多去了不少城市，拍了不少照片，因此萌生了写个程序提取照片位置信息，转换为轨迹点画在一张地图上的想法。</p>
<a id="more"></a>

<h2 id="导出-GPX-文件"><a href="#导出-GPX-文件" class="headerlink" title="导出 GPX 文件"></a>导出 GPX 文件</h2><p>使用 GeoSetter 软件批量提取并导出图像 GPS 信息，保存为 GPX 文件，下面是一段 .gpx 文件的记录点格式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trkpt</span> <span class="attr">lat</span>=<span class="string">"35.94073611"</span> <span class="attr">lon</span>=<span class="string">"120.17107500"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span>2017-10-19T20:40:31Z<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ele</span>&gt;</span>11.170000<span class="tag">&lt;/<span class="name">ele</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">speed</span>&gt;</span>0.000000<span class="tag">&lt;/<span class="name">speed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span>293.078156<span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trkpt</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="读取-GPX-文件数据"><a href="#读取-GPX-文件数据" class="headerlink" title="读取 GPX 文件数据"></a>读取 GPX 文件数据</h2><p>直接使用 Python 自带的 xml 库完成读取 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdom</span><br><span class="line"></span><br><span class="line">gpxPath = <span class="string">'test.gpx'</span></span><br><span class="line">dom_tree = xdom.parse(gpxPath)</span><br><span class="line">collection = dom_tree.documentElement</span><br><span class="line">trkpts = collection.getElementsByTagName(<span class="string">"trkpt"</span>)</span><br><span class="line">data = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> trkpt <span class="keyword">in</span> trkpts:</span><br><span class="line">    lat = trkpt.getAttribute(<span class="string">"lat"</span>)</span><br><span class="line">    lon = trkpt.getAttribute(<span class="string">"lon"</span>)</span><br><span class="line">    <span class="keyword">if</span> lat==<span class="string">'0'</span> <span class="keyword">or</span> lon==<span class="string">'0'</span>:</span><br><span class="line">    	<span class="keyword">continue</span></span><br><span class="line">    ret = wgs84_to_gcj02(float(lon), float(lat))</span><br><span class="line">    data = data + <span class="string">"&#123; 'center': '"</span> + str(ret[<span class="number">0</span>]) + <span class="string">","</span> + str(ret[<span class="number">1</span>]) + <span class="string">"' &#125;,\n"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(gpxPath + <span class="string">'.js'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<h2 id="WGS84-转-GCJ02，解决高德坐标偏移"><a href="#WGS84-转-GCJ02，解决高德坐标偏移" class="headerlink" title="WGS84 转 GCJ02，解决高德坐标偏移"></a>WGS84 转 GCJ02，解决高德坐标偏移</h2><p>做过地图相关开发的同学肯定会遇到这样一个问题：同样的经纬度坐标，在谷歌地图和高德地图上的位置是不一样的。</p>
<h3 id="常用地图坐标系介绍"><a href="#常用地图坐标系介绍" class="headerlink" title="常用地图坐标系介绍"></a>常用地图坐标系介绍</h3><ul>
<li>WGS-84：是使用最广泛的坐标系，也是世界通用的坐标系，GPS 设备得到的经纬度就是在 WGS84 坐标系下的经纬度。通常底层接口（ HTML5 Geolocation 或 iOS、安卓 API ）得到的定位信息都是 WGS84 坐标系。</li>
<li>GCJ-02：又被称为火星坐标系，中国坐标偏移标准，高德地图、腾讯地图以及 Google 中国区地图使用。</li>
<li>BD-09 ：百度坐标偏移标准，百度地图使用。</li>
</ul>
<h3 id="Python-实现-GPS-偏移校正-WGS-84-到-GCJ-02"><a href="#Python-实现-GPS-偏移校正-WGS-84-到-GCJ-02" class="headerlink" title="Python 实现 GPS 偏移校正 ( WGS-84 ) 到 ( GCJ-02 )"></a>Python 实现 GPS 偏移校正 ( WGS-84 ) 到 ( GCJ-02 )</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br></pre></td></tr></table></figure>

<h2 id="对位置数据进行可视化展示"><a href="#对位置数据进行可视化展示" class="headerlink" title="对位置数据进行可视化展示"></a>对位置数据进行可视化展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的足迹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        html,</span><br><span class="line">        body,</span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> &#123;</span></span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/loca?v=1.3.2&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./data.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'amap://styles/1de318cbb8d12c02303a22c550b9ccc9'</span>,</span></span><br><span class="line">            zoom: 5,</span><br><span class="line">            center: [112.12255, 35.2044],</span><br><span class="line"><span class="actionscript">			mapStyle: <span class="string">'dark'</span>,</span></span><br><span class="line"><span class="actionscript">			features: [<span class="string">'bg'</span>, <span class="string">'road'</span>, <span class="string">'point'</span>],</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// Loca 自 1.2.0 起 viewMode 模式默认为 3D，如需 2D 模式，请显示配置。</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// viewMode: '3D'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> Loca.PointLayer(&#123;</span></span><br><span class="line">            map: map</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setData(districts, &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 指定经纬度所在字段</span></span></span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'center'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setOptions(&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 圆形半径，单位像素</span></span></span><br><span class="line">                radius: 2.5,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 填充颜色</span></span></span><br><span class="line"><span class="actionscript">                color: <span class="string">'#14B4C9'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 描边颜色</span></span></span><br><span class="line"><span class="actionscript">                borderColor: <span class="string">'#14B4C9'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 描边宽度，单位像素</span></span></span><br><span class="line">                borderWidth: 1,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 透明度 [0-1]</span></span></span><br><span class="line">                opacity: 0.9,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.render();</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考: <a href="https://lbs.amap.com/api/loca-api/demos/scatter/scatter_citys" target="_blank" rel="noopener">高德地图 API 散点示例</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://cyh42.github.io/Blog-Back-Up/map/track.html" target="_blank" rel="noopener">我的足迹</a></p>
<p><img src="/article/track/CHN.jpg" alt></p>
<p><img src="/article/track/TAO.jpg" alt></p>
<p><img src="/article/track/UPC.jpg" alt></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>保研经验分享：如果当时选择了放弃，我可能会后悔一辈子</title>
    <url>/article/tm/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码" />
    <label for="pass">请输入密码</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>保研</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/article/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
