<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>疫情防控每日上报自动签到</title>
    <url>/article/ncov/</url>
    <content><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>中国石油大学（华东）疫情防控每日上报网页自动化签到（Python + selenium + Edge）</p>
<a id="more"></a>

<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p><em>Python版本</em>：3.7.3<br><em>Edge WebDriver版本</em>：80.0.361.62<br><em>IDE</em>：PyCharm 2019.1.3<br><em>相关模块</em>：<code>selenium</code> 和 <code>time</code> 模块</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>安装 Python 并添加到环境变量，<code>pip</code> 安装需要的相关模块，下载对应版本的 Edge WebDriver 即可。</p>
<h2 id="原理简介"><a href="#原理简介" class="headerlink" title="原理简介"></a>原理简介</h2><p>通过 <code>selenium</code> 自动化操作网页进行登录、定位和确认。</p>
<h2 id="完整源代码"><a href="#完整源代码" class="headerlink" title="完整源代码"></a>完整源代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请先下载Edge WebDriver: https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/</span></span><br><span class="line">driver = webdriver.Edge()</span><br><span class="line">url = <span class="string">'https://app.upc.edu.cn/ncov/wap/default/index'</span></span><br><span class="line">driver.get(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 登录</span></span><br><span class="line">    username = driver.find_element_by_xpath(<span class="string">'//*[@id="app"]/div[2]/div[1]/input'</span>)</span><br><span class="line">    username.send_keys(<span class="string">'你的学号'</span>)</span><br><span class="line">    psw = driver.find_element_by_xpath(<span class="string">'//*[@id="app"]/div[2]/div[2]/input'</span>)</span><br><span class="line">    psw.send_keys(<span class="string">'你的密码'</span>)</span><br><span class="line">    login = driver.find_element_by_xpath(<span class="string">'//*[@id="app"]/div[3]'</span>)</span><br><span class="line">    login.click()</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 定位</span></span><br><span class="line">    ip = driver.find_element_by_xpath(<span class="string">'/html/body/div[1]/div/div/section/div[4]/ul/li[6]/div/input'</span>)</span><br><span class="line">    ip.click()</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    btn = driver.find_element_by_xpath(<span class="string">'/html/body/div[1]/div/div/section/div[5]/div/a'</span>)</span><br><span class="line">    btn.click()</span><br><span class="line">    <span class="comment"># 二次确认</span></span><br><span class="line">    btn_ok = driver.find_element_by_xpath(<span class="string">'//*[@id="wapcf"]/div/div[2]/div[2]'</span>)</span><br><span class="line">    btn_ok.click()</span><br><span class="line">    print(<span class="string">'签到成功！'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>记录我去过的和想去的地方</title>
    <url>/article/travel/</url>
    <content><![CDATA[<p>旅行列表&amp;心愿名单</p>
<a id="more"></a>

<h2 id="旅行列表"><a href="#旅行列表" class="headerlink" title="旅行列表"></a>旅行列表</h2><table>
<thead>
<tr>
<th>日期</th>
<th>省份</th>
<th>城市\地区（景点）</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>2010/8/8-10</td>
<td>上海市</td>
<td>世博会</td>
<td></td>
</tr>
<tr>
<td>2010年8月中旬</td>
<td>浙江省</td>
<td>杭州（西湖）、绍兴（鲁迅故里）</td>
<td></td>
</tr>
<tr>
<td>2013年6月下旬</td>
<td>湖北省</td>
<td>武汉（黄鹤楼、长江大桥）</td>
<td>中考后</td>
</tr>
<tr>
<td>2015年4月</td>
<td>浙江省</td>
<td>温州（雁荡山）</td>
<td>春游</td>
</tr>
<tr>
<td>2015/7/21-24</td>
<td>福建省</td>
<td>厦门（厦门大学、嘉庚公园、鼓浪屿、曾厝垵）</td>
<td></td>
</tr>
<tr>
<td>2016/7/5-6</td>
<td>浙江省</td>
<td>西塘</td>
<td></td>
</tr>
<tr>
<td>2016/7/7</td>
<td>浙江省</td>
<td>乌镇</td>
<td></td>
</tr>
<tr>
<td>2016/7/8-9</td>
<td>上海市</td>
<td>城隍庙、东方明珠、外滩、同济、复旦、上交</td>
<td></td>
</tr>
<tr>
<td>2016/9/2<br>2017/7/6</td>
<td>江苏省</td>
<td>南京（鼓楼、中山陵、夫子庙、南大、东南）</td>
<td></td>
</tr>
<tr>
<td>2018/7/10-18</td>
<td>山东省</td>
<td>东营（石油大学）</td>
<td>实习</td>
</tr>
<tr>
<td>2018/7/23-28</td>
<td>河南省</td>
<td>洛阳（一拖、丽景门、龙门石窟）、巩义市</td>
<td>实习</td>
</tr>
<tr>
<td>2019/6/30-7/4</td>
<td>湖北省</td>
<td>武汉（华科、黄鹤楼、长江大桥、龟山）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/5-7</td>
<td>陕西省</td>
<td>西安（西交、钟楼、鼓楼、大明宫）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/8-10</td>
<td>天津市</td>
<td>天津大学、天津之眼、天塔</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/7/10-14<br>2019/7/20-31</td>
<td>河北省</td>
<td>唐山市曹妃甸区</td>
<td>实习</td>
</tr>
<tr>
<td>2019/7/15-19</td>
<td>安徽省</td>
<td>合肥（中科大）</td>
<td>夏令营</td>
</tr>
<tr>
<td>2019/8/1</td>
<td>山东省</td>
<td>济南（芙蓉街、大明湖）</td>
<td>换乘</td>
</tr>
<tr>
<td>2019/9/15</td>
<td>北京市</td>
<td>清华、北大、南锣鼓巷、天坛、永定门</td>
<td>预推免</td>
</tr>
<tr>
<td>2019/9/26-28</td>
<td>浙江省</td>
<td>杭州（浙大玉泉校区、西湖、城市阳台）</td>
<td>预推免</td>
</tr>
<tr>
<td>2019/9/28</td>
<td>浙江省</td>
<td>宁波（老外滩、江北天主教堂、解放桥）</td>
<td>转飞机</td>
</tr>
</tbody></table>
<h2 id="心愿名单"><a href="#心愿名单" class="headerlink" title="心愿名单"></a>心愿名单</h2><table>
<thead>
<tr>
<th>目的地</th>
<th>内容</th>
<th>计划时间</th>
</tr>
</thead>
<tbody><tr>
<td>山东泰安</td>
<td>泰山</td>
<td>2020年上半年</td>
</tr>
<tr>
<td>湖南长沙</td>
<td>岳麓山、湖南大学、橘子洲头、茶颜悦色</td>
<td></td>
</tr>
<tr>
<td>成都、重庆</td>
<td>大熊猫基地、火锅、串串</td>
<td></td>
</tr>
<tr>
<td>香港</td>
<td></td>
<td>2021-2023</td>
</tr>
<tr>
<td>澳门</td>
<td>威尼斯人、官也街、大三巴牌坊</td>
<td>2021-2023</td>
</tr>
<tr>
<td>日本</td>
<td>东京、北海道、富士山</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 和高德 API 绘制跑步轨迹</title>
    <url>/article/run-track/</url>
    <content><![CDATA[<p>把2019年在不同地方跑步的轨迹都画在一张地图上，看看过去一年都跑过哪些地方。</p>
<a id="more"></a>

<h2 id="导出-GPX-文件"><a href="#导出-GPX-文件" class="headerlink" title="导出 GPX 文件"></a>导出 GPX 文件</h2><p>第一步，先把各个地方能导出轨迹的都导出来。看了一下 .FIT 、 .TPX 和 .GPX 中，以 GPX 文件结构最简单，于是把轨迹都导成 .gpx 格式文件。</p>
<h2 id="读取-GPX-文件数据"><a href="#读取-GPX-文件数据" class="headerlink" title="读取 GPX 文件数据"></a>读取 GPX 文件数据</h2><p>第二步，用 Python 读入这些 GPX 轨迹信息，处理后再画在地图上，直接使用 Python 自带的 xml 库完成读取，注意要剔除 lat 和 lon 为0的数据点，因为 GPX 是用这种方法来标记暂停的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdom</span><br><span class="line"></span><br><span class="line">dom_tree = xdom.parse(os.path.join(filePath, gpxPath))</span><br><span class="line">collection = dom_tree.documentElement</span><br><span class="line">trkpts = collection.getElementsByTagName(<span class="string">"trkpt"</span>)</span><br><span class="line">data = <span class="string">'&#123;"line_id":"'</span> + gpxPath[:<span class="number">8</span>] + <span class="string">'","lnglat":['</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> trkpt <span class="keyword">in</span> trkpts:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    lat = trkpt.getAttribute(<span class="string">"lat"</span>)</span><br><span class="line">    lon = trkpt.getAttribute(<span class="string">"lon"</span>)</span><br><span class="line">    <span class="keyword">if</span> lat == <span class="string">'0'</span> <span class="keyword">or</span> lon == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    ret = wgs84_to_gcj02(float(lon), float(lat))</span><br><span class="line">    data = data + <span class="string">'['</span> + str(ret[<span class="number">0</span>]) + <span class="string">','</span> + str(ret[<span class="number">1</span>]) + <span class="string">']'</span></span><br><span class="line">    <span class="keyword">if</span>(i &lt; len(trkpts)):</span><br><span class="line">        data = data + <span class="string">','</span></span><br><span class="line">data = data + <span class="string">']&#125;,'</span></span><br></pre></td></tr></table></figure>

<h2 id="WGS84-转-GCJ02，解决高德坐标偏移"><a href="#WGS84-转-GCJ02，解决高德坐标偏移" class="headerlink" title="WGS84 转 GCJ02，解决高德坐标偏移"></a>WGS84 转 GCJ02，解决高德坐标偏移</h2><p>用 Python 实现 GPS 偏移校正，WGS84 转 GCJ02（火星坐标系）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br></pre></td></tr></table></figure>

<h2 id="输出-JSON-文件"><a href="#输出-JSON-文件" class="headerlink" title="输出 JSON 文件"></a>输出 JSON 文件</h2><p>输出 JS 可以方便读取的 JSON 文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">jsonDir = os.path.abspath(<span class="string">'./jsons'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(jsonDir):</span><br><span class="line">    os.mkdir(jsonDir)</span><br><span class="line">jsonPath = os.path.join(jsonDir, gpxPath[:<span class="number">8</span>]) + <span class="string">'.json'</span></span><br><span class="line"><span class="keyword">with</span> open(jsonPath, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<p>为了方便的处理多条数据，把上面 Python 的部分写成一个 procXml 函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    filePath = os.path.abspath(<span class="string">'./gpxs'</span>)</span><br><span class="line">    fileList = os.listdir(filePath)</span><br><span class="line">    <span class="keyword">for</span> gpxPath <span class="keyword">in</span> fileList:</span><br><span class="line">        print(<span class="string">'Processing '</span> + str(gpxPath))</span><br><span class="line">        procXml(filePath, gpxPath)</span><br><span class="line">        print(<span class="string">'Coresponding JSON file was generated.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="对位置数据进行可视化展示"><a href="#对位置数据进行可视化展示" class="headerlink" title="对位置数据进行可视化展示"></a>对位置数据进行可视化展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1.0, user-scalable=no, width=device-width"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>跑步轨迹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cache.amap.com/lbs/static/main1119.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myPageTop"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入关键字：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"tipinput"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=您申请的key值"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/loca?v=1.3.2&amp;key=您申请的key值"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./line.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cache.amap.com/lbs/static/addToolbar.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span>		</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'amap://styles/1de318cbb8d12c02303a22c550b9ccc9'</span>,</span></span><br><span class="line">            zoom: 11,</span><br><span class="line"><span class="actionscript">            center: [<span class="number">120.168109</span>,<span class="number">35.943654</span>], <span class="comment">// 青岛</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// zoom: 15,</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// center: [121.37553692,28.3687836300], // 温岭</span></span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'dark'</span>,</span></span><br><span class="line"><span class="actionscript">			features: [<span class="string">'bg'</span>,<span class="string">'point'</span>],</span></span><br><span class="line"><span class="actionscript">            resizeEnable: <span class="literal">true</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//输入提示</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> autoOptions = &#123;</span></span><br><span class="line"><span class="actionscript">            input: <span class="string">"tipinput"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        AMap.plugin([<span class="string">'AMap.Autocomplete'</span>,<span class="string">'AMap.PlaceSearch'</span>,<span class="string">'AMap.MapType'</span>],<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> auto = <span class="keyword">new</span> AMap.Autocomplete(autoOptions);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> placeSearch = <span class="keyword">new</span> AMap.PlaceSearch(&#123;</span></span><br><span class="line">                map: map</span><br><span class="line"><span class="actionscript">            &#125;);  <span class="comment">//构造地点查询类</span></span></span><br><span class="line"><span class="actionscript">            AMap.event.addListener(auto, <span class="string">"select"</span>, select);<span class="comment">//注册监听，当选中某条记录时会触发</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">                placeSearch.setCity(e.poi.adcode);</span><br><span class="line"><span class="actionscript">                placeSearch.search(e.poi.name);  <span class="comment">//关键字查询查询</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            map.addControl(<span class="keyword">new</span> AMap.MapType());</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> Loca.LineLayer(&#123;</span></span><br><span class="line">            map: map</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">		<span class="keyword">var</span> colors = [<span class="string">'#07E8E4'</span>,<span class="string">'#1f78b4'</span>,<span class="string">'#b2df8a'</span>,<span class="string">'#33a02c'</span>,<span class="string">'#fb9a99'</span>,<span class="string">'#e31a1c'</span>,<span class="string">'#fdbf6f'</span>,<span class="string">'#ff7f00'</span>,<span class="string">'#D1E87D'</span>,<span class="string">'#AD92D1'</span>,<span class="string">'#3346BD'</span>,<span class="string">'#EBEB8D'</span>,<span class="string">'#7FC97F'</span>];</span></span><br><span class="line"></span><br><span class="line">        layer.setData(lines, &#123;</span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'lnglat'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setOptions(&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line">                borderWidth: 3,</span><br><span class="line">                opacity: 1,</span><br><span class="line"><span class="actionscript">                color: <span class="function"><span class="keyword">function</span><span class="params">(v)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> id = v.value.line_id;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> len = colors.length;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> colors[id % len];</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">		<span class="comment">// 渲染</span></span></span><br><span class="line">		layer.render();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考: <a href="https://lbs.amap.com/api/loca-api/demos/line/bj_busline_colors" target="_blank" rel="noopener">高德地图 API 分类路径示例</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://cyh42.github.io/Blog-Back-Up/map/run">跑步轨迹</a></p>
<p><img src="/article/run-track/Qingdao.jpg" alt></p>
<p><img src="/article/run-track/Wenling.jpg" alt></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 和高德地图 API 绘制我的足迹</title>
    <url>/article/track/</url>
    <content><![CDATA[<p>最近3年多去了不少城市，拍了不少照片，因此萌生了写个程序提取照片位置信息，转换为轨迹点画在一张地图上的想法。</p>
<a id="more"></a>

<h2 id="导出-GPX-文件"><a href="#导出-GPX-文件" class="headerlink" title="导出 GPX 文件"></a>导出 GPX 文件</h2><p>使用 GeoSetter 软件批量提取并导出图像 GPS 信息，保存为 GPX 文件，下面是一段 .gpx 文件的记录点格式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trkpt</span> <span class="attr">lat</span>=<span class="string">"35.94073611"</span> <span class="attr">lon</span>=<span class="string">"120.17107500"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span>2017-10-19T20:40:31Z<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ele</span>&gt;</span>11.170000<span class="tag">&lt;/<span class="name">ele</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">speed</span>&gt;</span>0.000000<span class="tag">&lt;/<span class="name">speed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span>293.078156<span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trkpt</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="读取-GPX-文件数据"><a href="#读取-GPX-文件数据" class="headerlink" title="读取 GPX 文件数据"></a>读取 GPX 文件数据</h2><p>直接使用 Python 自带的 xml 库完成读取 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdom</span><br><span class="line"></span><br><span class="line">dom_tree = xdom.parse(os.path.join(filePath, gpxPath))</span><br><span class="line">collection = dom_tree.documentElement</span><br><span class="line">trkpts = collection.getElementsByTagName(<span class="string">"trkpt"</span>)</span><br><span class="line">data = <span class="string">""</span></span><br><span class="line">rets = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> trkpt <span class="keyword">in</span> trkpts:</span><br><span class="line">    lat = trkpt.getAttribute(<span class="string">"lat"</span>)</span><br><span class="line">    lon = trkpt.getAttribute(<span class="string">"lon"</span>)</span><br><span class="line">    <span class="keyword">if</span> lat == <span class="string">'0'</span> <span class="keyword">or</span> lon == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    ret = wgs84_to_gcj02(float(lon), float(lat))</span><br><span class="line">    rets.append(ret)</span><br><span class="line">    data = data + <span class="string">"&#123; 'center': '"</span> + str(ret[<span class="number">0</span>]) + <span class="string">","</span> + str(ret[<span class="number">1</span>]) + <span class="string">"' &#125;,\n"</span></span><br></pre></td></tr></table></figure>

<h2 id="WGS84-转-GCJ02，解决高德坐标偏移"><a href="#WGS84-转-GCJ02，解决高德坐标偏移" class="headerlink" title="WGS84 转 GCJ02，解决高德坐标偏移"></a>WGS84 转 GCJ02，解决高德坐标偏移</h2><p>做过地图相关开发的同学肯定会遇到这样一个问题：同样的经纬度坐标，在谷歌地图和高德地图上的位置是不一样的。</p>
<h3 id="常用地图坐标系介绍"><a href="#常用地图坐标系介绍" class="headerlink" title="常用地图坐标系介绍"></a>常用地图坐标系介绍</h3><ul>
<li>WGS-84：是使用最广泛的坐标系，也是世界通用的坐标系，GPS 设备得到的经纬度就是在 WGS84 坐标系下的经纬度。通常底层接口（ HTML5 Geolocation 或 iOS、安卓 API ）得到的定位信息都是 WGS84 坐标系。</li>
<li>GCJ-02：又被称为火星坐标系，中国坐标偏移标准，高德地图、腾讯地图以及 Google 中国区地图使用。</li>
<li>BD-09 ：百度坐标偏移标准，百度地图使用。</li>
</ul>
<h3 id="Python-实现-GPS-偏移校正-WGS-84-到-GCJ-02"><a href="#Python-实现-GPS-偏移校正-WGS-84-到-GCJ-02" class="headerlink" title="Python 实现 GPS 偏移校正 ( WGS-84 ) 到 ( GCJ-02 )"></a>Python 实现 GPS 偏移校正 ( WGS-84 ) 到 ( GCJ-02 )</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span><span class="params">(lng, lat)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br></pre></td></tr></table></figure>

<h2 id="输出-JS-文件"><a href="#输出-JS-文件" class="headerlink" title="输出 JS 文件"></a>输出 JS 文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">jsDir = os.path.abspath(<span class="string">'./js'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(jsDir):</span><br><span class="line">    os.mkdir(jsDir)</span><br><span class="line">jsonPath = os.path.join(jsDir, gpxPath) + <span class="string">'.js'</span></span><br><span class="line"><span class="keyword">with</span> open(jsonPath, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<p>为了方便的处理多条数据，把上面 Python 的部分写成一个 procXml 函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    filePath = os.path.abspath(<span class="string">'./gpxs'</span>)</span><br><span class="line">    fileList = os.listdir(filePath)</span><br><span class="line">    <span class="keyword">for</span> gpxPath <span class="keyword">in</span> fileList:</span><br><span class="line">        print(<span class="string">'Processing '</span> + str(gpxPath))</span><br><span class="line">        procXml(filePath, gpxPath)</span><br><span class="line">        print(<span class="string">'Coresponding JS file was generated.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="对位置数据进行可视化展示"><a href="#对位置数据进行可视化展示" class="headerlink" title="对位置数据进行可视化展示"></a>对位置数据进行可视化展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的足迹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cache.amap.com/lbs/static/main1119.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myPageTop"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入关键字：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"tipinput"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/loca?v=1.3.2&amp;key=8b093298b30af4240493f7a641ed0029"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./data.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cache.amap.com/lbs/static/addToolbar.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'amap://styles/1de318cbb8d12c02303a22c550b9ccc9'</span>,</span></span><br><span class="line">            zoom: 5,</span><br><span class="line">            center: [112.12255, 35.2044],</span><br><span class="line"><span class="actionscript">            mapStyle: <span class="string">'dark'</span>,</span></span><br><span class="line"><span class="actionscript">            features: [<span class="string">'bg'</span>, <span class="string">'road'</span>, <span class="string">'point'</span>],</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> layer = <span class="keyword">new</span> Loca.PointLayer(&#123;</span></span><br><span class="line">            map: map</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setData(districts, &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 指定经纬度所在字段</span></span></span><br><span class="line"><span class="actionscript">            lnglat: <span class="string">'center'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.setOptions(&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 圆形半径，单位像素</span></span></span><br><span class="line">                radius: 2.5,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 填充颜色</span></span></span><br><span class="line"><span class="actionscript">                color: <span class="string">'#14B4C9'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 描边颜色</span></span></span><br><span class="line"><span class="actionscript">                borderColor: <span class="string">'#14B4C9'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 描边宽度，单位像素</span></span></span><br><span class="line">                borderWidth: 1,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 透明度 [0-1]</span></span></span><br><span class="line">                opacity: 0.9,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        layer.render();</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//输入提示</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> autoOptions = &#123;</span></span><br><span class="line"><span class="actionscript">            input: <span class="string">"tipinput"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        AMap.plugin([<span class="string">'AMap.Autocomplete'</span>,<span class="string">'AMap.PlaceSearch'</span>,<span class="string">'AMap.MapType'</span>],<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> auto = <span class="keyword">new</span> AMap.Autocomplete(autoOptions);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> placeSearch = <span class="keyword">new</span> AMap.PlaceSearch(&#123;</span></span><br><span class="line">                map: map</span><br><span class="line"><span class="actionscript">            &#125;);  <span class="comment">//构造地点查询类</span></span></span><br><span class="line"><span class="actionscript">            AMap.event.addListener(auto, <span class="string">"select"</span>, select);<span class="comment">//注册监听，当选中某条记录时会触发</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">                placeSearch.setCity(e.poi.adcode);</span><br><span class="line"><span class="actionscript">                placeSearch.search(e.poi.name);  <span class="comment">//关键字查询查询</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            map.addControl(<span class="keyword">new</span> AMap.MapType());</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考: <a href="https://lbs.amap.com/api/loca-api/demos/scatter/scatter_citys" target="_blank" rel="noopener">高德地图 API 散点示例</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://cyh42.github.io/Blog-Back-Up/map/track">我的足迹</a></p>
<p><img src="/article/track/CHN.jpg" alt></p>
<p><img src="/article/track/TAO.jpg" alt></p>
<p><img src="/article/track/UPC.jpg" alt></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>保研经验分享：如果当时选择了放弃，我可能会后悔一辈子</title>
    <url>/article/tm/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码" />
    <label for="pass">请输入密码</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>保研</tag>
      </tags>
  </entry>
</search>
